
Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cec  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002e98  08002e98  00003e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ed8  08002ed8  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002ed8  08002ed8  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002ed8  08002ed8  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ed8  08002ed8  00003ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002edc  08002edc  00003edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002ee0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000050c  2000000c  08002eec  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000518  08002eec  00004518  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b072  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f25  00000000  00000000  0000f0ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab0  00000000  00000000  00010fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007f9  00000000  00000000  00011a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027d75  00000000  00000000  00012281  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ba63  00000000  00000000  00039ff6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f163f  00000000  00000000  00045a59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00137098  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002aac  00000000  00000000  001370dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00139b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002e80 	.word	0x08002e80

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08002e80 	.word	0x08002e80

080001ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b083      	sub	sp, #12
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	4603      	mov	r3, r0
 80001f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	db0b      	blt.n	8000216 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001fe:	79fb      	ldrb	r3, [r7, #7]
 8000200:	f003 021f 	and.w	r2, r3, #31
 8000204:	4907      	ldr	r1, [pc, #28]	@ (8000224 <__NVIC_EnableIRQ+0x38>)
 8000206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800020a:	095b      	lsrs	r3, r3, #5
 800020c:	2001      	movs	r0, #1
 800020e:	fa00 f202 	lsl.w	r2, r0, r2
 8000212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000216:	bf00      	nop
 8000218:	370c      	adds	r7, #12
 800021a:	46bd      	mov	sp, r7
 800021c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000220:	4770      	bx	lr
 8000222:	bf00      	nop
 8000224:	e000e100 	.word	0xe000e100

08000228 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000228:	b480      	push	{r7}
 800022a:	b083      	sub	sp, #12
 800022c:	af00      	add	r7, sp, #0
 800022e:	4603      	mov	r3, r0
 8000230:	6039      	str	r1, [r7, #0]
 8000232:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000238:	2b00      	cmp	r3, #0
 800023a:	db0a      	blt.n	8000252 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800023c:	683b      	ldr	r3, [r7, #0]
 800023e:	b2da      	uxtb	r2, r3
 8000240:	490c      	ldr	r1, [pc, #48]	@ (8000274 <__NVIC_SetPriority+0x4c>)
 8000242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000246:	0112      	lsls	r2, r2, #4
 8000248:	b2d2      	uxtb	r2, r2
 800024a:	440b      	add	r3, r1
 800024c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000250:	e00a      	b.n	8000268 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000252:	683b      	ldr	r3, [r7, #0]
 8000254:	b2da      	uxtb	r2, r3
 8000256:	4908      	ldr	r1, [pc, #32]	@ (8000278 <__NVIC_SetPriority+0x50>)
 8000258:	79fb      	ldrb	r3, [r7, #7]
 800025a:	f003 030f 	and.w	r3, r3, #15
 800025e:	3b04      	subs	r3, #4
 8000260:	0112      	lsls	r2, r2, #4
 8000262:	b2d2      	uxtb	r2, r2
 8000264:	440b      	add	r3, r1
 8000266:	761a      	strb	r2, [r3, #24]
}
 8000268:	bf00      	nop
 800026a:	370c      	adds	r7, #12
 800026c:	46bd      	mov	sp, r7
 800026e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000272:	4770      	bx	lr
 8000274:	e000e100 	.word	0xe000e100
 8000278:	e000ed00 	.word	0xe000ed00

0800027c <GPIO_Config>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void GPIO_Config(void){
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
	//enable the GPIO clock
	//RCC->AHB2ENR |=(1<<0);//port A is enable
	RCC->AHB2ENR |=(1<<0);
 8000280:	4b1d      	ldr	r3, [pc, #116]	@ (80002f8 <GPIO_Config+0x7c>)
 8000282:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000284:	4a1c      	ldr	r2, [pc, #112]	@ (80002f8 <GPIO_Config+0x7c>)
 8000286:	f043 0301 	orr.w	r3, r3, #1
 800028a:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RCC->AHB2ENR |=(1<<2);
 800028c:	4b1a      	ldr	r3, [pc, #104]	@ (80002f8 <GPIO_Config+0x7c>)
 800028e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000290:	4a19      	ldr	r2, [pc, #100]	@ (80002f8 <GPIO_Config+0x7c>)
 8000292:	f043 0304 	orr.w	r3, r3, #4
 8000296:	64d3      	str	r3, [r2, #76]	@ 0x4c
	//for portB and port C (1<<1) or (1<<2)
	//set the pin as output
	//GPIOB->MODER |=(1<<28);//PIN 14B(BITS 29 ,28) AS OUTPUT MODE (01)
	//GPIOB->MODER |=(1<<14);//PIN 7B(BITS 15 ,14) AS OUTPUT MODE (01)
	GPIOC->MODER &= ~(3 << (13 * 2)); // Clear MODER13 (set as input) //PIN 13C(BITS 27,26) AS INPUT(00)
 8000298:	4b18      	ldr	r3, [pc, #96]	@ (80002fc <GPIO_Config+0x80>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4a17      	ldr	r2, [pc, #92]	@ (80002fc <GPIO_Config+0x80>)
 800029e:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 80002a2:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(3 << (7 * 2));  // Clear mode
 80002a4:	4b16      	ldr	r3, [pc, #88]	@ (8000300 <GPIO_Config+0x84>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a15      	ldr	r2, [pc, #84]	@ (8000300 <GPIO_Config+0x84>)
 80002aa:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80002ae:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1 << (7 * 2));   // Set as output
 80002b0:	4b13      	ldr	r3, [pc, #76]	@ (8000300 <GPIO_Config+0x84>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a12      	ldr	r2, [pc, #72]	@ (8000300 <GPIO_Config+0x84>)
 80002b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80002ba:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(3 << (14 * 2)); // Clear bits 29:28
 80002bc:	4b10      	ldr	r3, [pc, #64]	@ (8000300 <GPIO_Config+0x84>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4a0f      	ldr	r2, [pc, #60]	@ (8000300 <GPIO_Config+0x84>)
 80002c2:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 80002c6:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |=  (1 << (14 * 2)); // Set bit 28 to 1 (01 = output)
 80002c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000300 <GPIO_Config+0x84>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	4a0c      	ldr	r2, [pc, #48]	@ (8000300 <GPIO_Config+0x84>)
 80002ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80002d2:	6013      	str	r3, [r2, #0]

	//configure output mode
	//GPIOB->OTYPER=0;
	//GPIOB->OSPEEDR=0;
	//Configure pull up or pull down register
	GPIOC->PUPDR &= ~(3 << (13 * 2)); // Clear PUPD13
 80002d4:	4b09      	ldr	r3, [pc, #36]	@ (80002fc <GPIO_Config+0x80>)
 80002d6:	68db      	ldr	r3, [r3, #12]
 80002d8:	4a08      	ldr	r2, [pc, #32]	@ (80002fc <GPIO_Config+0x80>)
 80002da:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 80002de:	60d3      	str	r3, [r2, #12]
	GPIOC->PUPDR |=  (2 << (13 * 2)); // Set to pull-down (10)
 80002e0:	4b06      	ldr	r3, [pc, #24]	@ (80002fc <GPIO_Config+0x80>)
 80002e2:	68db      	ldr	r3, [r3, #12]
 80002e4:	4a05      	ldr	r2, [pc, #20]	@ (80002fc <GPIO_Config+0x80>)
 80002e6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80002ea:	60d3      	str	r3, [r2, #12]
//pull down mode(10)pin 27 is 1 and pin 26 is 0
}
 80002ec:	bf00      	nop
 80002ee:	46bd      	mov	sp, r7
 80002f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	40021000 	.word	0x40021000
 80002fc:	48000800 	.word	0x48000800
 8000300:	48000400 	.word	0x48000400

08000304 <interrupt>:
void interrupt(void){
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
	//enable the SYSCNFG bit in RCC Register
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000308:	4b16      	ldr	r3, [pc, #88]	@ (8000364 <interrupt+0x60>)
 800030a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800030c:	4a15      	ldr	r2, [pc, #84]	@ (8000364 <interrupt+0x60>)
 800030e:	f043 0301 	orr.w	r3, r3, #1
 8000312:	6613      	str	r3, [r2, #96]	@ 0x60

	//Configure the EXTI configuration register in theSYSCNFG
	SYSCFG->EXTICR[3] &= ~(0xF << 4); // Clear EXTI13 bits
 8000314:	4b14      	ldr	r3, [pc, #80]	@ (8000368 <interrupt+0x64>)
 8000316:	695b      	ldr	r3, [r3, #20]
 8000318:	4a13      	ldr	r2, [pc, #76]	@ (8000368 <interrupt+0x64>)
 800031a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800031e:	6153      	str	r3, [r2, #20]
	SYSCFG->EXTICR[3] |= (0x2 << 4);  // 0x2 = Port C
 8000320:	4b11      	ldr	r3, [pc, #68]	@ (8000368 <interrupt+0x64>)
 8000322:	695b      	ldr	r3, [r3, #20]
 8000324:	4a10      	ldr	r2, [pc, #64]	@ (8000368 <interrupt+0x64>)
 8000326:	f043 0320 	orr.w	r3, r3, #32
 800032a:	6153      	str	r3, [r2, #20]

	//DISABLETHE EXTI using Interrupt mask register (IMR)
	EXTI->IMR1 |=(1<<13);
 800032c:	4b0f      	ldr	r3, [pc, #60]	@ (800036c <interrupt+0x68>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	4a0e      	ldr	r2, [pc, #56]	@ (800036c <interrupt+0x68>)
 8000332:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000336:	6013      	str	r3, [r2, #0]
	//Configure the rising edge or falling trigger
	EXTI->FTSR1 |=(1<<13);//enable falling edge for pull down
 8000338:	4b0c      	ldr	r3, [pc, #48]	@ (800036c <interrupt+0x68>)
 800033a:	68db      	ldr	r3, [r3, #12]
 800033c:	4a0b      	ldr	r2, [pc, #44]	@ (800036c <interrupt+0x68>)
 800033e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000342:	60d3      	str	r3, [r2, #12]
	EXTI->RTSR1 &=~(1<<13);
 8000344:	4b09      	ldr	r3, [pc, #36]	@ (800036c <interrupt+0x68>)
 8000346:	689b      	ldr	r3, [r3, #8]
 8000348:	4a08      	ldr	r2, [pc, #32]	@ (800036c <interrupt+0x68>)
 800034a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800034e:	6093      	str	r3, [r2, #8]
	//Set the interrupt priority
	NVIC_SetPriority(EXTI15_10_IRQn, 1);//lower the number highest the priority
 8000350:	2101      	movs	r1, #1
 8000352:	2028      	movs	r0, #40	@ 0x28
 8000354:	f7ff ff68 	bl	8000228 <__NVIC_SetPriority>

	//Enable the interrupt
	NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000358:	2028      	movs	r0, #40	@ 0x28
 800035a:	f7ff ff47 	bl	80001ec <__NVIC_EnableIRQ>

}
 800035e:	bf00      	nop
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	40021000 	.word	0x40021000
 8000368:	40010000 	.word	0x40010000
 800036c:	40010400 	.word	0x40010400

08000370 <EXTI15_10_IRQHandler>:
volatile int flag=0;
volatile int count = 0;
void EXTI15_10_IRQHandler(void){
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
	//check the pin which triggered the interrupt
	//clear the interrupt pending bit
	if(EXTI->PR1 & (1<<13)){ //if the interrupt is caused by  PR1
 8000374:	4b08      	ldr	r3, [pc, #32]	@ (8000398 <EXTI15_10_IRQHandler+0x28>)
 8000376:	695b      	ldr	r3, [r3, #20]
 8000378:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800037c:	2b00      	cmp	r3, #0
 800037e:	d006      	beq.n	800038e <EXTI15_10_IRQHandler+0x1e>
		EXTI->PR1=(1<<13); //clear the interrupt pending bit
 8000380:	4b05      	ldr	r3, [pc, #20]	@ (8000398 <EXTI15_10_IRQHandler+0x28>)
 8000382:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000386:	615a      	str	r2, [r3, #20]
		flag=1;
 8000388:	4b04      	ldr	r3, [pc, #16]	@ (800039c <EXTI15_10_IRQHandler+0x2c>)
 800038a:	2201      	movs	r2, #1
 800038c:	601a      	str	r2, [r3, #0]


	}

}
 800038e:	bf00      	nop
 8000390:	46bd      	mov	sp, r7
 8000392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000396:	4770      	bx	lr
 8000398:	40010400 	.word	0x40010400
 800039c:	2000050c 	.word	0x2000050c

080003a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003a4:	f000 fac3 	bl	800092e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003a8:	f000 f842 	bl	8000430 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003ac:	f000 f8d2 	bl	8000554 <MX_GPIO_Init>
  MX_USB_OTG_FS_PCD_Init();
 80003b0:	f000 f8a2 	bl	80004f8 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  GPIO_Config();
 80003b4:	f7ff ff62 	bl	800027c <GPIO_Config>
  interrupt();
 80003b8:	f7ff ffa4 	bl	8000304 <interrupt>
//		  GPIOB->BSRR |=(1<<7);//SET
//		  HAL_Delay(100);
//		  GPIOB->BSRR |=((1<<7)<<16);//RESET
//		  HAL_Delay(100);

		 if(flag){
 80003bc:	4b19      	ldr	r3, [pc, #100]	@ (8000424 <main+0x84>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d0fb      	beq.n	80003bc <main+0x1c>


			 HAL_Delay(100);
 80003c4:	2064      	movs	r0, #100	@ 0x64
 80003c6:	f000 fb27 	bl	8000a18 <HAL_Delay>
			 count++;
 80003ca:	4b17      	ldr	r3, [pc, #92]	@ (8000428 <main+0x88>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	3301      	adds	r3, #1
 80003d0:	4a15      	ldr	r2, [pc, #84]	@ (8000428 <main+0x88>)
 80003d2:	6013      	str	r3, [r2, #0]

			 if (count == 1) {
 80003d4:	4b14      	ldr	r3, [pc, #80]	@ (8000428 <main+0x88>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	2b01      	cmp	r3, #1
 80003da:	d107      	bne.n	80003ec <main+0x4c>
			     // PB7 ON, PB14 OFF
			     GPIOB->BSRR = (1 << 7);            // Set PB7
 80003dc:	4b13      	ldr	r3, [pc, #76]	@ (800042c <main+0x8c>)
 80003de:	2280      	movs	r2, #128	@ 0x80
 80003e0:	619a      	str	r2, [r3, #24]
			     GPIOB->BSRR = (1 << (14 + 16));    // Reset PB14
 80003e2:	4b12      	ldr	r3, [pc, #72]	@ (800042c <main+0x8c>)
 80003e4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003e8:	619a      	str	r2, [r3, #24]
 80003ea:	e016      	b.n	800041a <main+0x7a>
			 }
			 else if (count == 2) {
 80003ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000428 <main+0x88>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	2b02      	cmp	r3, #2
 80003f2:	d108      	bne.n	8000406 <main+0x66>
			     // PB14 ON, PB7 OFF
			     GPIOB->BSRR = (1 << 14);           // Set PB14
 80003f4:	4b0d      	ldr	r3, [pc, #52]	@ (800042c <main+0x8c>)
 80003f6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80003fa:	619a      	str	r2, [r3, #24]
			     GPIOB->BSRR = (1 << (7 + 16));     // Reset PB7
 80003fc:	4b0b      	ldr	r3, [pc, #44]	@ (800042c <main+0x8c>)
 80003fe:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000402:	619a      	str	r2, [r3, #24]
 8000404:	e009      	b.n	800041a <main+0x7a>
			 }
			 else {
			     // Both ON
			     GPIOB->BSRR = (1 << 7);            // Set PB7
 8000406:	4b09      	ldr	r3, [pc, #36]	@ (800042c <main+0x8c>)
 8000408:	2280      	movs	r2, #128	@ 0x80
 800040a:	619a      	str	r2, [r3, #24]
			     GPIOB->BSRR = (1 << 14);           // Set PB14
 800040c:	4b07      	ldr	r3, [pc, #28]	@ (800042c <main+0x8c>)
 800040e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000412:	619a      	str	r2, [r3, #24]
			     count = 0;  // Reset count for next cycle
 8000414:	4b04      	ldr	r3, [pc, #16]	@ (8000428 <main+0x88>)
 8000416:	2200      	movs	r2, #0
 8000418:	601a      	str	r2, [r3, #0]
			 }

			 //GPIOB->BSRR |=(1<<7);//SET

			 flag=0;
 800041a:	4b02      	ldr	r3, [pc, #8]	@ (8000424 <main+0x84>)
 800041c:	2200      	movs	r2, #0
 800041e:	601a      	str	r2, [r3, #0]
		 if(flag){
 8000420:	e7cc      	b.n	80003bc <main+0x1c>
 8000422:	bf00      	nop
 8000424:	2000050c 	.word	0x2000050c
 8000428:	20000510 	.word	0x20000510
 800042c:	48000400 	.word	0x48000400

08000430 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b096      	sub	sp, #88	@ 0x58
 8000434:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000436:	f107 0314 	add.w	r3, r7, #20
 800043a:	2244      	movs	r2, #68	@ 0x44
 800043c:	2100      	movs	r1, #0
 800043e:	4618      	mov	r0, r3
 8000440:	f002 fcf1 	bl	8002e26 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000444:	463b      	mov	r3, r7
 8000446:	2200      	movs	r2, #0
 8000448:	601a      	str	r2, [r3, #0]
 800044a:	605a      	str	r2, [r3, #4]
 800044c:	609a      	str	r2, [r3, #8]
 800044e:	60da      	str	r2, [r3, #12]
 8000450:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000452:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000456:	f000 fee5 	bl	8001224 <HAL_PWREx_ControlVoltageScaling>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	d001      	beq.n	8000464 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000460:	f000 f934 	bl	80006cc <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000464:	f000 fec0 	bl	80011e8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000468:	4b22      	ldr	r3, [pc, #136]	@ (80004f4 <SystemClock_Config+0xc4>)
 800046a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800046e:	4a21      	ldr	r2, [pc, #132]	@ (80004f4 <SystemClock_Config+0xc4>)
 8000470:	f023 0318 	bic.w	r3, r3, #24
 8000474:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000478:	2314      	movs	r3, #20
 800047a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800047c:	2301      	movs	r3, #1
 800047e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000480:	2301      	movs	r3, #1
 8000482:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000484:	2300      	movs	r3, #0
 8000486:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000488:	2360      	movs	r3, #96	@ 0x60
 800048a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800048c:	2302      	movs	r3, #2
 800048e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000490:	2301      	movs	r3, #1
 8000492:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000494:	2301      	movs	r3, #1
 8000496:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 71;
 8000498:	2347      	movs	r3, #71	@ 0x47
 800049a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800049c:	2302      	movs	r3, #2
 800049e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80004a0:	2302      	movs	r3, #2
 80004a2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 80004a4:	2306      	movs	r3, #6
 80004a6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004a8:	f107 0314 	add.w	r3, r7, #20
 80004ac:	4618      	mov	r0, r3
 80004ae:	f000 ff2f 	bl	8001310 <HAL_RCC_OscConfig>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d001      	beq.n	80004bc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80004b8:	f000 f908 	bl	80006cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004bc:	230f      	movs	r3, #15
 80004be:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004c0:	2303      	movs	r3, #3
 80004c2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004c4:	2300      	movs	r3, #0
 80004c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80004cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004ce:	2300      	movs	r3, #0
 80004d0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004d2:	463b      	mov	r3, r7
 80004d4:	2102      	movs	r1, #2
 80004d6:	4618      	mov	r0, r3
 80004d8:	f001 fb34 	bl	8001b44 <HAL_RCC_ClockConfig>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80004e2:	f000 f8f3 	bl	80006cc <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80004e6:	f002 f815 	bl	8002514 <HAL_RCCEx_EnableMSIPLLMode>
}
 80004ea:	bf00      	nop
 80004ec:	3758      	adds	r7, #88	@ 0x58
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	40021000 	.word	0x40021000

080004f8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80004fc:	4b14      	ldr	r3, [pc, #80]	@ (8000550 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80004fe:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000502:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000504:	4b12      	ldr	r3, [pc, #72]	@ (8000550 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000506:	2206      	movs	r2, #6
 8000508:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800050a:	4b11      	ldr	r3, [pc, #68]	@ (8000550 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800050c:	2202      	movs	r2, #2
 800050e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000510:	4b0f      	ldr	r3, [pc, #60]	@ (8000550 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000512:	2202      	movs	r2, #2
 8000514:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000516:	4b0e      	ldr	r3, [pc, #56]	@ (8000550 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000518:	2201      	movs	r2, #1
 800051a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800051c:	4b0c      	ldr	r3, [pc, #48]	@ (8000550 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800051e:	2200      	movs	r2, #0
 8000520:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000522:	4b0b      	ldr	r3, [pc, #44]	@ (8000550 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000524:	2200      	movs	r2, #0
 8000526:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000528:	4b09      	ldr	r3, [pc, #36]	@ (8000550 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800052a:	2201      	movs	r2, #1
 800052c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800052e:	4b08      	ldr	r3, [pc, #32]	@ (8000550 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000530:	2200      	movs	r2, #0
 8000532:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000534:	4b06      	ldr	r3, [pc, #24]	@ (8000550 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000536:	2201      	movs	r2, #1
 8000538:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800053a:	4805      	ldr	r0, [pc, #20]	@ (8000550 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800053c:	f000 fd20 	bl	8000f80 <HAL_PCD_Init>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000546:	f000 f8c1 	bl	80006cc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800054a:	bf00      	nop
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	20000028 	.word	0x20000028

08000554 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b08a      	sub	sp, #40	@ 0x28
 8000558:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055a:	f107 0314 	add.w	r3, r7, #20
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
 8000562:	605a      	str	r2, [r3, #4]
 8000564:	609a      	str	r2, [r3, #8]
 8000566:	60da      	str	r2, [r3, #12]
 8000568:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800056a:	4b54      	ldr	r3, [pc, #336]	@ (80006bc <MX_GPIO_Init+0x168>)
 800056c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800056e:	4a53      	ldr	r2, [pc, #332]	@ (80006bc <MX_GPIO_Init+0x168>)
 8000570:	f043 0304 	orr.w	r3, r3, #4
 8000574:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000576:	4b51      	ldr	r3, [pc, #324]	@ (80006bc <MX_GPIO_Init+0x168>)
 8000578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800057a:	f003 0304 	and.w	r3, r3, #4
 800057e:	613b      	str	r3, [r7, #16]
 8000580:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000582:	4b4e      	ldr	r3, [pc, #312]	@ (80006bc <MX_GPIO_Init+0x168>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000586:	4a4d      	ldr	r2, [pc, #308]	@ (80006bc <MX_GPIO_Init+0x168>)
 8000588:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800058c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800058e:	4b4b      	ldr	r3, [pc, #300]	@ (80006bc <MX_GPIO_Init+0x168>)
 8000590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000592:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000596:	60fb      	str	r3, [r7, #12]
 8000598:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800059a:	4b48      	ldr	r3, [pc, #288]	@ (80006bc <MX_GPIO_Init+0x168>)
 800059c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800059e:	4a47      	ldr	r2, [pc, #284]	@ (80006bc <MX_GPIO_Init+0x168>)
 80005a0:	f043 0301 	orr.w	r3, r3, #1
 80005a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005a6:	4b45      	ldr	r3, [pc, #276]	@ (80006bc <MX_GPIO_Init+0x168>)
 80005a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005aa:	f003 0301 	and.w	r3, r3, #1
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b2:	4b42      	ldr	r3, [pc, #264]	@ (80006bc <MX_GPIO_Init+0x168>)
 80005b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005b6:	4a41      	ldr	r2, [pc, #260]	@ (80006bc <MX_GPIO_Init+0x168>)
 80005b8:	f043 0302 	orr.w	r3, r3, #2
 80005bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005be:	4b3f      	ldr	r3, [pc, #252]	@ (80006bc <MX_GPIO_Init+0x168>)
 80005c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005c2:	f003 0302 	and.w	r3, r3, #2
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80005ca:	4b3c      	ldr	r3, [pc, #240]	@ (80006bc <MX_GPIO_Init+0x168>)
 80005cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ce:	4a3b      	ldr	r2, [pc, #236]	@ (80006bc <MX_GPIO_Init+0x168>)
 80005d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80005d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005d6:	4b39      	ldr	r3, [pc, #228]	@ (80006bc <MX_GPIO_Init+0x168>)
 80005d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80005de:	603b      	str	r3, [r7, #0]
 80005e0:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 80005e2:	f000 fe85 	bl	80012f0 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2160      	movs	r1, #96	@ 0x60
 80005ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005ee:	f000 fcaf 	bl	8000f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|LD2_Pin, GPIO_PIN_RESET);
 80005f2:	2200      	movs	r2, #0
 80005f4:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 80005f8:	4831      	ldr	r0, [pc, #196]	@ (80006c0 <MX_GPIO_Init+0x16c>)
 80005fa:	f000 fca9 	bl	8000f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 80005fe:	2200      	movs	r2, #0
 8000600:	21c0      	movs	r1, #192	@ 0xc0
 8000602:	4830      	ldr	r0, [pc, #192]	@ (80006c4 <MX_GPIO_Init+0x170>)
 8000604:	f000 fca4 	bl	8000f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000608:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800060c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800060e:	2300      	movs	r3, #0
 8000610:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000612:	2300      	movs	r3, #0
 8000614:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000616:	f107 0314 	add.w	r3, r7, #20
 800061a:	4619      	mov	r1, r3
 800061c:	482a      	ldr	r0, [pc, #168]	@ (80006c8 <MX_GPIO_Init+0x174>)
 800061e:	f000 fb05 	bl	8000c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000622:	2360      	movs	r3, #96	@ 0x60
 8000624:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000626:	2301      	movs	r3, #1
 8000628:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062a:	2300      	movs	r3, #0
 800062c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062e:	2300      	movs	r3, #0
 8000630:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000632:	f107 0314 	add.w	r3, r7, #20
 8000636:	4619      	mov	r1, r3
 8000638:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800063c:	f000 faf6 	bl	8000c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|LD2_Pin;
 8000640:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8000644:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000646:	2301      	movs	r3, #1
 8000648:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064a:	2300      	movs	r3, #0
 800064c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064e:	2300      	movs	r3, #0
 8000650:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000652:	f107 0314 	add.w	r3, r7, #20
 8000656:	4619      	mov	r1, r3
 8000658:	4819      	ldr	r0, [pc, #100]	@ (80006c0 <MX_GPIO_Init+0x16c>)
 800065a:	f000 fae7 	bl	8000c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800065e:	2320      	movs	r3, #32
 8000660:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000662:	2300      	movs	r3, #0
 8000664:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000666:	2300      	movs	r3, #0
 8000668:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800066a:	f107 0314 	add.w	r3, r7, #20
 800066e:	4619      	mov	r1, r3
 8000670:	4814      	ldr	r0, [pc, #80]	@ (80006c4 <MX_GPIO_Init+0x170>)
 8000672:	f000 fadb 	bl	8000c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_PowerSwitchOn_Pin PG7 */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|GPIO_PIN_7;
 8000676:	23c0      	movs	r3, #192	@ 0xc0
 8000678:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067a:	2301      	movs	r3, #1
 800067c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067e:	2300      	movs	r3, #0
 8000680:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000682:	2300      	movs	r3, #0
 8000684:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000686:	f107 0314 	add.w	r3, r7, #20
 800068a:	4619      	mov	r1, r3
 800068c:	480d      	ldr	r0, [pc, #52]	@ (80006c4 <MX_GPIO_Init+0x170>)
 800068e:	f000 facd 	bl	8000c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_TX_Pin;
 8000692:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000696:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000698:	2302      	movs	r3, #2
 800069a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069c:	2300      	movs	r3, #0
 800069e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006a0:	2303      	movs	r3, #3
 80006a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80006a4:	2308      	movs	r3, #8
 80006a6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(STLK_TX_GPIO_Port, &GPIO_InitStruct);
 80006a8:	f107 0314 	add.w	r3, r7, #20
 80006ac:	4619      	mov	r1, r3
 80006ae:	4805      	ldr	r0, [pc, #20]	@ (80006c4 <MX_GPIO_Init+0x170>)
 80006b0:	f000 fabc 	bl	8000c2c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80006b4:	bf00      	nop
 80006b6:	3728      	adds	r7, #40	@ 0x28
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40021000 	.word	0x40021000
 80006c0:	48000400 	.word	0x48000400
 80006c4:	48001800 	.word	0x48001800
 80006c8:	48000800 	.word	0x48000800

080006cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006d0:	b672      	cpsid	i
}
 80006d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006d4:	bf00      	nop
 80006d6:	e7fd      	b.n	80006d4 <Error_Handler+0x8>

080006d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006de:	4b0f      	ldr	r3, [pc, #60]	@ (800071c <HAL_MspInit+0x44>)
 80006e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006e2:	4a0e      	ldr	r2, [pc, #56]	@ (800071c <HAL_MspInit+0x44>)
 80006e4:	f043 0301 	orr.w	r3, r3, #1
 80006e8:	6613      	str	r3, [r2, #96]	@ 0x60
 80006ea:	4b0c      	ldr	r3, [pc, #48]	@ (800071c <HAL_MspInit+0x44>)
 80006ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006ee:	f003 0301 	and.w	r3, r3, #1
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f6:	4b09      	ldr	r3, [pc, #36]	@ (800071c <HAL_MspInit+0x44>)
 80006f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006fa:	4a08      	ldr	r2, [pc, #32]	@ (800071c <HAL_MspInit+0x44>)
 80006fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000700:	6593      	str	r3, [r2, #88]	@ 0x58
 8000702:	4b06      	ldr	r3, [pc, #24]	@ (800071c <HAL_MspInit+0x44>)
 8000704:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000706:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800070a:	603b      	str	r3, [r7, #0]
 800070c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800070e:	bf00      	nop
 8000710:	370c      	adds	r7, #12
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	40021000 	.word	0x40021000

08000720 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b0ae      	sub	sp, #184	@ 0xb8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000728:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
 8000736:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000738:	f107 0318 	add.w	r3, r7, #24
 800073c:	228c      	movs	r2, #140	@ 0x8c
 800073e:	2100      	movs	r1, #0
 8000740:	4618      	mov	r0, r3
 8000742:	f002 fb70 	bl	8002e26 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800074e:	d17c      	bne.n	800084a <HAL_PCD_MspInit+0x12a>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000750:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000754:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000756:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800075a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800075e:	2301      	movs	r3, #1
 8000760:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000762:	2301      	movs	r3, #1
 8000764:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000766:	2318      	movs	r3, #24
 8000768:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800076a:	2302      	movs	r3, #2
 800076c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800076e:	2302      	movs	r3, #2
 8000770:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000772:	2302      	movs	r3, #2
 8000774:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000776:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800077a:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800077c:	f107 0318 	add.w	r3, r7, #24
 8000780:	4618      	mov	r0, r3
 8000782:	f001 fbcb 	bl	8001f1c <HAL_RCCEx_PeriphCLKConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 800078c:	f7ff ff9e 	bl	80006cc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000790:	4b30      	ldr	r3, [pc, #192]	@ (8000854 <HAL_PCD_MspInit+0x134>)
 8000792:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000794:	4a2f      	ldr	r2, [pc, #188]	@ (8000854 <HAL_PCD_MspInit+0x134>)
 8000796:	f043 0301 	orr.w	r3, r3, #1
 800079a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800079c:	4b2d      	ldr	r3, [pc, #180]	@ (8000854 <HAL_PCD_MspInit+0x134>)
 800079e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007a0:	f003 0301 	and.w	r3, r3, #1
 80007a4:	617b      	str	r3, [r7, #20]
 80007a6:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80007a8:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80007ac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b0:	2302      	movs	r3, #2
 80007b2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	2300      	movs	r3, #0
 80007b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007bc:	2303      	movs	r3, #3
 80007be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80007c2:	230a      	movs	r3, #10
 80007c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80007cc:	4619      	mov	r1, r3
 80007ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007d2:	f000 fa2b 	bl	8000c2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80007d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80007da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007de:	2300      	movs	r3, #0
 80007e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80007ea:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80007ee:	4619      	mov	r1, r3
 80007f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007f4:	f000 fa1a 	bl	8000c2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80007f8:	4b16      	ldr	r3, [pc, #88]	@ (8000854 <HAL_PCD_MspInit+0x134>)
 80007fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007fc:	4a15      	ldr	r2, [pc, #84]	@ (8000854 <HAL_PCD_MspInit+0x134>)
 80007fe:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000802:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000804:	4b13      	ldr	r3, [pc, #76]	@ (8000854 <HAL_PCD_MspInit+0x134>)
 8000806:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000808:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800080c:	613b      	str	r3, [r7, #16]
 800080e:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000810:	4b10      	ldr	r3, [pc, #64]	@ (8000854 <HAL_PCD_MspInit+0x134>)
 8000812:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000814:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000818:	2b00      	cmp	r3, #0
 800081a:	d114      	bne.n	8000846 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800081c:	4b0d      	ldr	r3, [pc, #52]	@ (8000854 <HAL_PCD_MspInit+0x134>)
 800081e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000820:	4a0c      	ldr	r2, [pc, #48]	@ (8000854 <HAL_PCD_MspInit+0x134>)
 8000822:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000826:	6593      	str	r3, [r2, #88]	@ 0x58
 8000828:	4b0a      	ldr	r3, [pc, #40]	@ (8000854 <HAL_PCD_MspInit+0x134>)
 800082a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800082c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000830:	60fb      	str	r3, [r7, #12]
 8000832:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8000834:	f000 fd4c 	bl	80012d0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000838:	4b06      	ldr	r3, [pc, #24]	@ (8000854 <HAL_PCD_MspInit+0x134>)
 800083a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800083c:	4a05      	ldr	r2, [pc, #20]	@ (8000854 <HAL_PCD_MspInit+0x134>)
 800083e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000842:	6593      	str	r3, [r2, #88]	@ 0x58

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000844:	e001      	b.n	800084a <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8000846:	f000 fd43 	bl	80012d0 <HAL_PWREx_EnableVddUSB>
}
 800084a:	bf00      	nop
 800084c:	37b8      	adds	r7, #184	@ 0xb8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40021000 	.word	0x40021000

08000858 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800085c:	bf00      	nop
 800085e:	e7fd      	b.n	800085c <NMI_Handler+0x4>

08000860 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000864:	bf00      	nop
 8000866:	e7fd      	b.n	8000864 <HardFault_Handler+0x4>

08000868 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800086c:	bf00      	nop
 800086e:	e7fd      	b.n	800086c <MemManage_Handler+0x4>

08000870 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000874:	bf00      	nop
 8000876:	e7fd      	b.n	8000874 <BusFault_Handler+0x4>

08000878 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800087c:	bf00      	nop
 800087e:	e7fd      	b.n	800087c <UsageFault_Handler+0x4>

08000880 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000884:	bf00      	nop
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr

0800088e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr

0800089c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr

080008aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ae:	f000 f893 	bl	80009d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
	...

080008b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80008bc:	4b06      	ldr	r3, [pc, #24]	@ (80008d8 <SystemInit+0x20>)
 80008be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008c2:	4a05      	ldr	r2, [pc, #20]	@ (80008d8 <SystemInit+0x20>)
 80008c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80008cc:	bf00      	nop
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	e000ed00 	.word	0xe000ed00

080008dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80008dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000914 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008e0:	f7ff ffea 	bl	80008b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008e4:	480c      	ldr	r0, [pc, #48]	@ (8000918 <LoopForever+0x6>)
  ldr r1, =_edata
 80008e6:	490d      	ldr	r1, [pc, #52]	@ (800091c <LoopForever+0xa>)
  ldr r2, =_sidata
 80008e8:	4a0d      	ldr	r2, [pc, #52]	@ (8000920 <LoopForever+0xe>)
  movs r3, #0
 80008ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008ec:	e002      	b.n	80008f4 <LoopCopyDataInit>

080008ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008f2:	3304      	adds	r3, #4

080008f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008f8:	d3f9      	bcc.n	80008ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000924 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008fc:	4c0a      	ldr	r4, [pc, #40]	@ (8000928 <LoopForever+0x16>)
  movs r3, #0
 80008fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000900:	e001      	b.n	8000906 <LoopFillZerobss>

08000902 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000902:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000904:	3204      	adds	r2, #4

08000906 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000906:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000908:	d3fb      	bcc.n	8000902 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800090a:	f002 fa95 	bl	8002e38 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800090e:	f7ff fd47 	bl	80003a0 <main>

08000912 <LoopForever>:

LoopForever:
    b LoopForever
 8000912:	e7fe      	b.n	8000912 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000914:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000918:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800091c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000920:	08002ee0 	.word	0x08002ee0
  ldr r2, =_sbss
 8000924:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000928:	20000518 	.word	0x20000518

0800092c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800092c:	e7fe      	b.n	800092c <ADC1_2_IRQHandler>

0800092e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800092e:	b580      	push	{r7, lr}
 8000930:	b082      	sub	sp, #8
 8000932:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000934:	2300      	movs	r3, #0
 8000936:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000938:	2003      	movs	r0, #3
 800093a:	f000 f943 	bl	8000bc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800093e:	2000      	movs	r0, #0
 8000940:	f000 f80e 	bl	8000960 <HAL_InitTick>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d002      	beq.n	8000950 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800094a:	2301      	movs	r3, #1
 800094c:	71fb      	strb	r3, [r7, #7]
 800094e:	e001      	b.n	8000954 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000950:	f7ff fec2 	bl	80006d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000954:	79fb      	ldrb	r3, [r7, #7]
}
 8000956:	4618      	mov	r0, r3
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
	...

08000960 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000968:	2300      	movs	r3, #0
 800096a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800096c:	4b17      	ldr	r3, [pc, #92]	@ (80009cc <HAL_InitTick+0x6c>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d023      	beq.n	80009bc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000974:	4b16      	ldr	r3, [pc, #88]	@ (80009d0 <HAL_InitTick+0x70>)
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	4b14      	ldr	r3, [pc, #80]	@ (80009cc <HAL_InitTick+0x6c>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	4619      	mov	r1, r3
 800097e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000982:	fbb3 f3f1 	udiv	r3, r3, r1
 8000986:	fbb2 f3f3 	udiv	r3, r2, r3
 800098a:	4618      	mov	r0, r3
 800098c:	f000 f941 	bl	8000c12 <HAL_SYSTICK_Config>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d10f      	bne.n	80009b6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	2b0f      	cmp	r3, #15
 800099a:	d809      	bhi.n	80009b0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800099c:	2200      	movs	r2, #0
 800099e:	6879      	ldr	r1, [r7, #4]
 80009a0:	f04f 30ff 	mov.w	r0, #4294967295
 80009a4:	f000 f919 	bl	8000bda <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009a8:	4a0a      	ldr	r2, [pc, #40]	@ (80009d4 <HAL_InitTick+0x74>)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	6013      	str	r3, [r2, #0]
 80009ae:	e007      	b.n	80009c0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80009b0:	2301      	movs	r3, #1
 80009b2:	73fb      	strb	r3, [r7, #15]
 80009b4:	e004      	b.n	80009c0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009b6:	2301      	movs	r3, #1
 80009b8:	73fb      	strb	r3, [r7, #15]
 80009ba:	e001      	b.n	80009c0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009bc:	2301      	movs	r3, #1
 80009be:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3710      	adds	r7, #16
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000008 	.word	0x20000008
 80009d0:	20000000 	.word	0x20000000
 80009d4:	20000004 	.word	0x20000004

080009d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009dc:	4b06      	ldr	r3, [pc, #24]	@ (80009f8 <HAL_IncTick+0x20>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	461a      	mov	r2, r3
 80009e2:	4b06      	ldr	r3, [pc, #24]	@ (80009fc <HAL_IncTick+0x24>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4413      	add	r3, r2
 80009e8:	4a04      	ldr	r2, [pc, #16]	@ (80009fc <HAL_IncTick+0x24>)
 80009ea:	6013      	str	r3, [r2, #0]
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	20000008 	.word	0x20000008
 80009fc:	20000514 	.word	0x20000514

08000a00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  return uwTick;
 8000a04:	4b03      	ldr	r3, [pc, #12]	@ (8000a14 <HAL_GetTick+0x14>)
 8000a06:	681b      	ldr	r3, [r3, #0]
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	20000514 	.word	0x20000514

08000a18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a20:	f7ff ffee 	bl	8000a00 <HAL_GetTick>
 8000a24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a30:	d005      	beq.n	8000a3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000a32:	4b0a      	ldr	r3, [pc, #40]	@ (8000a5c <HAL_Delay+0x44>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	461a      	mov	r2, r3
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a3e:	bf00      	nop
 8000a40:	f7ff ffde 	bl	8000a00 <HAL_GetTick>
 8000a44:	4602      	mov	r2, r0
 8000a46:	68bb      	ldr	r3, [r7, #8]
 8000a48:	1ad3      	subs	r3, r2, r3
 8000a4a:	68fa      	ldr	r2, [r7, #12]
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	d8f7      	bhi.n	8000a40 <HAL_Delay+0x28>
  {
  }
}
 8000a50:	bf00      	nop
 8000a52:	bf00      	nop
 8000a54:	3710      	adds	r7, #16
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	20000008 	.word	0x20000008

08000a60 <__NVIC_SetPriorityGrouping>:
{
 8000a60:	b480      	push	{r7}
 8000a62:	b085      	sub	sp, #20
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	f003 0307 	and.w	r3, r3, #7
 8000a6e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a70:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa4 <__NVIC_SetPriorityGrouping+0x44>)
 8000a72:	68db      	ldr	r3, [r3, #12]
 8000a74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a76:	68ba      	ldr	r2, [r7, #8]
 8000a78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a92:	4a04      	ldr	r2, [pc, #16]	@ (8000aa4 <__NVIC_SetPriorityGrouping+0x44>)
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	60d3      	str	r3, [r2, #12]
}
 8000a98:	bf00      	nop
 8000a9a:	3714      	adds	r7, #20
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr
 8000aa4:	e000ed00 	.word	0xe000ed00

08000aa8 <__NVIC_GetPriorityGrouping>:
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aac:	4b04      	ldr	r3, [pc, #16]	@ (8000ac0 <__NVIC_GetPriorityGrouping+0x18>)
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	0a1b      	lsrs	r3, r3, #8
 8000ab2:	f003 0307 	and.w	r3, r3, #7
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr
 8000ac0:	e000ed00 	.word	0xe000ed00

08000ac4 <__NVIC_SetPriority>:
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	6039      	str	r1, [r7, #0]
 8000ace:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	db0a      	blt.n	8000aee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	b2da      	uxtb	r2, r3
 8000adc:	490c      	ldr	r1, [pc, #48]	@ (8000b10 <__NVIC_SetPriority+0x4c>)
 8000ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae2:	0112      	lsls	r2, r2, #4
 8000ae4:	b2d2      	uxtb	r2, r2
 8000ae6:	440b      	add	r3, r1
 8000ae8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000aec:	e00a      	b.n	8000b04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	b2da      	uxtb	r2, r3
 8000af2:	4908      	ldr	r1, [pc, #32]	@ (8000b14 <__NVIC_SetPriority+0x50>)
 8000af4:	79fb      	ldrb	r3, [r7, #7]
 8000af6:	f003 030f 	and.w	r3, r3, #15
 8000afa:	3b04      	subs	r3, #4
 8000afc:	0112      	lsls	r2, r2, #4
 8000afe:	b2d2      	uxtb	r2, r2
 8000b00:	440b      	add	r3, r1
 8000b02:	761a      	strb	r2, [r3, #24]
}
 8000b04:	bf00      	nop
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	e000e100 	.word	0xe000e100
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b089      	sub	sp, #36	@ 0x24
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	60f8      	str	r0, [r7, #12]
 8000b20:	60b9      	str	r1, [r7, #8]
 8000b22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	f003 0307 	and.w	r3, r3, #7
 8000b2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b2c:	69fb      	ldr	r3, [r7, #28]
 8000b2e:	f1c3 0307 	rsb	r3, r3, #7
 8000b32:	2b04      	cmp	r3, #4
 8000b34:	bf28      	it	cs
 8000b36:	2304      	movcs	r3, #4
 8000b38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b3a:	69fb      	ldr	r3, [r7, #28]
 8000b3c:	3304      	adds	r3, #4
 8000b3e:	2b06      	cmp	r3, #6
 8000b40:	d902      	bls.n	8000b48 <NVIC_EncodePriority+0x30>
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	3b03      	subs	r3, #3
 8000b46:	e000      	b.n	8000b4a <NVIC_EncodePriority+0x32>
 8000b48:	2300      	movs	r3, #0
 8000b4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b50:	69bb      	ldr	r3, [r7, #24]
 8000b52:	fa02 f303 	lsl.w	r3, r2, r3
 8000b56:	43da      	mvns	r2, r3
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	401a      	ands	r2, r3
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b60:	f04f 31ff 	mov.w	r1, #4294967295
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	fa01 f303 	lsl.w	r3, r1, r3
 8000b6a:	43d9      	mvns	r1, r3
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b70:	4313      	orrs	r3, r2
         );
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3724      	adds	r7, #36	@ 0x24
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
	...

08000b80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	3b01      	subs	r3, #1
 8000b8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b90:	d301      	bcc.n	8000b96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b92:	2301      	movs	r3, #1
 8000b94:	e00f      	b.n	8000bb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b96:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc0 <SysTick_Config+0x40>)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	3b01      	subs	r3, #1
 8000b9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b9e:	210f      	movs	r1, #15
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	f7ff ff8e 	bl	8000ac4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ba8:	4b05      	ldr	r3, [pc, #20]	@ (8000bc0 <SysTick_Config+0x40>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bae:	4b04      	ldr	r3, [pc, #16]	@ (8000bc0 <SysTick_Config+0x40>)
 8000bb0:	2207      	movs	r2, #7
 8000bb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bb4:	2300      	movs	r3, #0
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	e000e010 	.word	0xe000e010

08000bc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bcc:	6878      	ldr	r0, [r7, #4]
 8000bce:	f7ff ff47 	bl	8000a60 <__NVIC_SetPriorityGrouping>
}
 8000bd2:	bf00      	nop
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}

08000bda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	b086      	sub	sp, #24
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	4603      	mov	r3, r0
 8000be2:	60b9      	str	r1, [r7, #8]
 8000be4:	607a      	str	r2, [r7, #4]
 8000be6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000be8:	2300      	movs	r3, #0
 8000bea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000bec:	f7ff ff5c 	bl	8000aa8 <__NVIC_GetPriorityGrouping>
 8000bf0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bf2:	687a      	ldr	r2, [r7, #4]
 8000bf4:	68b9      	ldr	r1, [r7, #8]
 8000bf6:	6978      	ldr	r0, [r7, #20]
 8000bf8:	f7ff ff8e 	bl	8000b18 <NVIC_EncodePriority>
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c02:	4611      	mov	r1, r2
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff ff5d 	bl	8000ac4 <__NVIC_SetPriority>
}
 8000c0a:	bf00      	nop
 8000c0c:	3718      	adds	r7, #24
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b082      	sub	sp, #8
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f7ff ffb0 	bl	8000b80 <SysTick_Config>
 8000c20:	4603      	mov	r3, r0
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
	...

08000c2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b087      	sub	sp, #28
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c36:	2300      	movs	r3, #0
 8000c38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c3a:	e166      	b.n	8000f0a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	2101      	movs	r1, #1
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	fa01 f303 	lsl.w	r3, r1, r3
 8000c48:	4013      	ands	r3, r2
 8000c4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	f000 8158 	beq.w	8000f04 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	f003 0303 	and.w	r3, r3, #3
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d005      	beq.n	8000c6c <HAL_GPIO_Init+0x40>
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	f003 0303 	and.w	r3, r3, #3
 8000c68:	2b02      	cmp	r3, #2
 8000c6a:	d130      	bne.n	8000cce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	689b      	ldr	r3, [r3, #8]
 8000c70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	005b      	lsls	r3, r3, #1
 8000c76:	2203      	movs	r2, #3
 8000c78:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7c:	43db      	mvns	r3, r3
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	4013      	ands	r3, r2
 8000c82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	68da      	ldr	r2, [r3, #12]
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c90:	693a      	ldr	r2, [r7, #16]
 8000c92:	4313      	orrs	r3, r2
 8000c94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	693a      	ldr	r2, [r7, #16]
 8000c9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	43db      	mvns	r3, r3
 8000cac:	693a      	ldr	r2, [r7, #16]
 8000cae:	4013      	ands	r3, r2
 8000cb0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	091b      	lsrs	r3, r3, #4
 8000cb8:	f003 0201 	and.w	r2, r3, #1
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	f003 0303 	and.w	r3, r3, #3
 8000cd6:	2b03      	cmp	r3, #3
 8000cd8:	d017      	beq.n	8000d0a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	68db      	ldr	r3, [r3, #12]
 8000cde:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	2203      	movs	r2, #3
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	43db      	mvns	r3, r3
 8000cec:	693a      	ldr	r2, [r7, #16]
 8000cee:	4013      	ands	r3, r2
 8000cf0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	689a      	ldr	r2, [r3, #8]
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	4313      	orrs	r3, r2
 8000d02:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f003 0303 	and.w	r3, r3, #3
 8000d12:	2b02      	cmp	r3, #2
 8000d14:	d123      	bne.n	8000d5e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	08da      	lsrs	r2, r3, #3
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	3208      	adds	r2, #8
 8000d1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	f003 0307 	and.w	r3, r3, #7
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	220f      	movs	r2, #15
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	43db      	mvns	r3, r3
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	4013      	ands	r3, r2
 8000d38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	691a      	ldr	r2, [r3, #16]
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	f003 0307 	and.w	r3, r3, #7
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	08da      	lsrs	r2, r3, #3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	3208      	adds	r2, #8
 8000d58:	6939      	ldr	r1, [r7, #16]
 8000d5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	2203      	movs	r2, #3
 8000d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6e:	43db      	mvns	r3, r3
 8000d70:	693a      	ldr	r2, [r7, #16]
 8000d72:	4013      	ands	r3, r2
 8000d74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f003 0203 	and.w	r2, r3, #3
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	f000 80b2 	beq.w	8000f04 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da0:	4b61      	ldr	r3, [pc, #388]	@ (8000f28 <HAL_GPIO_Init+0x2fc>)
 8000da2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000da4:	4a60      	ldr	r2, [pc, #384]	@ (8000f28 <HAL_GPIO_Init+0x2fc>)
 8000da6:	f043 0301 	orr.w	r3, r3, #1
 8000daa:	6613      	str	r3, [r2, #96]	@ 0x60
 8000dac:	4b5e      	ldr	r3, [pc, #376]	@ (8000f28 <HAL_GPIO_Init+0x2fc>)
 8000dae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000db0:	f003 0301 	and.w	r3, r3, #1
 8000db4:	60bb      	str	r3, [r7, #8]
 8000db6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000db8:	4a5c      	ldr	r2, [pc, #368]	@ (8000f2c <HAL_GPIO_Init+0x300>)
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	089b      	lsrs	r3, r3, #2
 8000dbe:	3302      	adds	r3, #2
 8000dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	f003 0303 	and.w	r3, r3, #3
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	220f      	movs	r2, #15
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000de2:	d02b      	beq.n	8000e3c <HAL_GPIO_Init+0x210>
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	4a52      	ldr	r2, [pc, #328]	@ (8000f30 <HAL_GPIO_Init+0x304>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d025      	beq.n	8000e38 <HAL_GPIO_Init+0x20c>
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	4a51      	ldr	r2, [pc, #324]	@ (8000f34 <HAL_GPIO_Init+0x308>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d01f      	beq.n	8000e34 <HAL_GPIO_Init+0x208>
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	4a50      	ldr	r2, [pc, #320]	@ (8000f38 <HAL_GPIO_Init+0x30c>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d019      	beq.n	8000e30 <HAL_GPIO_Init+0x204>
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	4a4f      	ldr	r2, [pc, #316]	@ (8000f3c <HAL_GPIO_Init+0x310>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d013      	beq.n	8000e2c <HAL_GPIO_Init+0x200>
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4a4e      	ldr	r2, [pc, #312]	@ (8000f40 <HAL_GPIO_Init+0x314>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d00d      	beq.n	8000e28 <HAL_GPIO_Init+0x1fc>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	4a4d      	ldr	r2, [pc, #308]	@ (8000f44 <HAL_GPIO_Init+0x318>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d007      	beq.n	8000e24 <HAL_GPIO_Init+0x1f8>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	4a4c      	ldr	r2, [pc, #304]	@ (8000f48 <HAL_GPIO_Init+0x31c>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d101      	bne.n	8000e20 <HAL_GPIO_Init+0x1f4>
 8000e1c:	2307      	movs	r3, #7
 8000e1e:	e00e      	b.n	8000e3e <HAL_GPIO_Init+0x212>
 8000e20:	2308      	movs	r3, #8
 8000e22:	e00c      	b.n	8000e3e <HAL_GPIO_Init+0x212>
 8000e24:	2306      	movs	r3, #6
 8000e26:	e00a      	b.n	8000e3e <HAL_GPIO_Init+0x212>
 8000e28:	2305      	movs	r3, #5
 8000e2a:	e008      	b.n	8000e3e <HAL_GPIO_Init+0x212>
 8000e2c:	2304      	movs	r3, #4
 8000e2e:	e006      	b.n	8000e3e <HAL_GPIO_Init+0x212>
 8000e30:	2303      	movs	r3, #3
 8000e32:	e004      	b.n	8000e3e <HAL_GPIO_Init+0x212>
 8000e34:	2302      	movs	r3, #2
 8000e36:	e002      	b.n	8000e3e <HAL_GPIO_Init+0x212>
 8000e38:	2301      	movs	r3, #1
 8000e3a:	e000      	b.n	8000e3e <HAL_GPIO_Init+0x212>
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	697a      	ldr	r2, [r7, #20]
 8000e40:	f002 0203 	and.w	r2, r2, #3
 8000e44:	0092      	lsls	r2, r2, #2
 8000e46:	4093      	lsls	r3, r2
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e4e:	4937      	ldr	r1, [pc, #220]	@ (8000f2c <HAL_GPIO_Init+0x300>)
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	089b      	lsrs	r3, r3, #2
 8000e54:	3302      	adds	r3, #2
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e5c:	4b3b      	ldr	r3, [pc, #236]	@ (8000f4c <HAL_GPIO_Init+0x320>)
 8000e5e:	689b      	ldr	r3, [r3, #8]
 8000e60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	43db      	mvns	r3, r3
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d003      	beq.n	8000e80 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e80:	4a32      	ldr	r2, [pc, #200]	@ (8000f4c <HAL_GPIO_Init+0x320>)
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000e86:	4b31      	ldr	r3, [pc, #196]	@ (8000f4c <HAL_GPIO_Init+0x320>)
 8000e88:	68db      	ldr	r3, [r3, #12]
 8000e8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	43db      	mvns	r3, r3
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	4013      	ands	r3, r2
 8000e94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d003      	beq.n	8000eaa <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000eaa:	4a28      	ldr	r2, [pc, #160]	@ (8000f4c <HAL_GPIO_Init+0x320>)
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000eb0:	4b26      	ldr	r3, [pc, #152]	@ (8000f4c <HAL_GPIO_Init+0x320>)
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d003      	beq.n	8000ed4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ed4:	4a1d      	ldr	r2, [pc, #116]	@ (8000f4c <HAL_GPIO_Init+0x320>)
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000eda:	4b1c      	ldr	r3, [pc, #112]	@ (8000f4c <HAL_GPIO_Init+0x320>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	43db      	mvns	r3, r3
 8000ee4:	693a      	ldr	r2, [r7, #16]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d003      	beq.n	8000efe <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000efe:	4a13      	ldr	r2, [pc, #76]	@ (8000f4c <HAL_GPIO_Init+0x320>)
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	3301      	adds	r3, #1
 8000f08:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	fa22 f303 	lsr.w	r3, r2, r3
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	f47f ae91 	bne.w	8000c3c <HAL_GPIO_Init+0x10>
  }
}
 8000f1a:	bf00      	nop
 8000f1c:	bf00      	nop
 8000f1e:	371c      	adds	r7, #28
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	40021000 	.word	0x40021000
 8000f2c:	40010000 	.word	0x40010000
 8000f30:	48000400 	.word	0x48000400
 8000f34:	48000800 	.word	0x48000800
 8000f38:	48000c00 	.word	0x48000c00
 8000f3c:	48001000 	.word	0x48001000
 8000f40:	48001400 	.word	0x48001400
 8000f44:	48001800 	.word	0x48001800
 8000f48:	48001c00 	.word	0x48001c00
 8000f4c:	40010400 	.word	0x40010400

08000f50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	460b      	mov	r3, r1
 8000f5a:	807b      	strh	r3, [r7, #2]
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f60:	787b      	ldrb	r3, [r7, #1]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d003      	beq.n	8000f6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f66:	887a      	ldrh	r2, [r7, #2]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f6c:	e002      	b.n	8000f74 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f6e:	887a      	ldrh	r2, [r7, #2]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000f74:	bf00      	nop
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af02      	add	r7, sp, #8
 8000f86:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d101      	bne.n	8000f92 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e101      	b.n	8001196 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d106      	bne.n	8000fac <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f7ff fbba 	bl	8000720 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2203      	movs	r2, #3
 8000fb0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f001 fcb3 	bl	800292a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6818      	ldr	r0, [r3, #0]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	7c1a      	ldrb	r2, [r3, #16]
 8000fcc:	f88d 2000 	strb.w	r2, [sp]
 8000fd0:	3304      	adds	r3, #4
 8000fd2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fd4:	f001 fc7c 	bl	80028d0 <USB_CoreInit>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d005      	beq.n	8000fea <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2202      	movs	r2, #2
 8000fe2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e0d5      	b.n	8001196 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f001 fcab 	bl	800294c <USB_SetCurrentMode>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d005      	beq.n	8001008 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2202      	movs	r2, #2
 8001000:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001004:	2301      	movs	r3, #1
 8001006:	e0c6      	b.n	8001196 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001008:	2300      	movs	r3, #0
 800100a:	73fb      	strb	r3, [r7, #15]
 800100c:	e04a      	b.n	80010a4 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800100e:	7bfa      	ldrb	r2, [r7, #15]
 8001010:	6879      	ldr	r1, [r7, #4]
 8001012:	4613      	mov	r3, r2
 8001014:	00db      	lsls	r3, r3, #3
 8001016:	4413      	add	r3, r2
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	440b      	add	r3, r1
 800101c:	3315      	adds	r3, #21
 800101e:	2201      	movs	r2, #1
 8001020:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001022:	7bfa      	ldrb	r2, [r7, #15]
 8001024:	6879      	ldr	r1, [r7, #4]
 8001026:	4613      	mov	r3, r2
 8001028:	00db      	lsls	r3, r3, #3
 800102a:	4413      	add	r3, r2
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	440b      	add	r3, r1
 8001030:	3314      	adds	r3, #20
 8001032:	7bfa      	ldrb	r2, [r7, #15]
 8001034:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001036:	7bfa      	ldrb	r2, [r7, #15]
 8001038:	7bfb      	ldrb	r3, [r7, #15]
 800103a:	b298      	uxth	r0, r3
 800103c:	6879      	ldr	r1, [r7, #4]
 800103e:	4613      	mov	r3, r2
 8001040:	00db      	lsls	r3, r3, #3
 8001042:	4413      	add	r3, r2
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	440b      	add	r3, r1
 8001048:	332e      	adds	r3, #46	@ 0x2e
 800104a:	4602      	mov	r2, r0
 800104c:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800104e:	7bfa      	ldrb	r2, [r7, #15]
 8001050:	6879      	ldr	r1, [r7, #4]
 8001052:	4613      	mov	r3, r2
 8001054:	00db      	lsls	r3, r3, #3
 8001056:	4413      	add	r3, r2
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	440b      	add	r3, r1
 800105c:	3318      	adds	r3, #24
 800105e:	2200      	movs	r2, #0
 8001060:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001062:	7bfa      	ldrb	r2, [r7, #15]
 8001064:	6879      	ldr	r1, [r7, #4]
 8001066:	4613      	mov	r3, r2
 8001068:	00db      	lsls	r3, r3, #3
 800106a:	4413      	add	r3, r2
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	440b      	add	r3, r1
 8001070:	331c      	adds	r3, #28
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001076:	7bfa      	ldrb	r2, [r7, #15]
 8001078:	6879      	ldr	r1, [r7, #4]
 800107a:	4613      	mov	r3, r2
 800107c:	00db      	lsls	r3, r3, #3
 800107e:	4413      	add	r3, r2
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	440b      	add	r3, r1
 8001084:	3320      	adds	r3, #32
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800108a:	7bfa      	ldrb	r2, [r7, #15]
 800108c:	6879      	ldr	r1, [r7, #4]
 800108e:	4613      	mov	r3, r2
 8001090:	00db      	lsls	r3, r3, #3
 8001092:	4413      	add	r3, r2
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	440b      	add	r3, r1
 8001098:	3324      	adds	r3, #36	@ 0x24
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800109e:	7bfb      	ldrb	r3, [r7, #15]
 80010a0:	3301      	adds	r3, #1
 80010a2:	73fb      	strb	r3, [r7, #15]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	791b      	ldrb	r3, [r3, #4]
 80010a8:	7bfa      	ldrb	r2, [r7, #15]
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d3af      	bcc.n	800100e <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010ae:	2300      	movs	r3, #0
 80010b0:	73fb      	strb	r3, [r7, #15]
 80010b2:	e044      	b.n	800113e <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80010b4:	7bfa      	ldrb	r2, [r7, #15]
 80010b6:	6879      	ldr	r1, [r7, #4]
 80010b8:	4613      	mov	r3, r2
 80010ba:	00db      	lsls	r3, r3, #3
 80010bc:	4413      	add	r3, r2
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	440b      	add	r3, r1
 80010c2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80010c6:	2200      	movs	r2, #0
 80010c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80010ca:	7bfa      	ldrb	r2, [r7, #15]
 80010cc:	6879      	ldr	r1, [r7, #4]
 80010ce:	4613      	mov	r3, r2
 80010d0:	00db      	lsls	r3, r3, #3
 80010d2:	4413      	add	r3, r2
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	440b      	add	r3, r1
 80010d8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80010dc:	7bfa      	ldrb	r2, [r7, #15]
 80010de:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80010e0:	7bfa      	ldrb	r2, [r7, #15]
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	4613      	mov	r3, r2
 80010e6:	00db      	lsls	r3, r3, #3
 80010e8:	4413      	add	r3, r2
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	440b      	add	r3, r1
 80010ee:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80010f2:	2200      	movs	r2, #0
 80010f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80010f6:	7bfa      	ldrb	r2, [r7, #15]
 80010f8:	6879      	ldr	r1, [r7, #4]
 80010fa:	4613      	mov	r3, r2
 80010fc:	00db      	lsls	r3, r3, #3
 80010fe:	4413      	add	r3, r2
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	440b      	add	r3, r1
 8001104:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800110c:	7bfa      	ldrb	r2, [r7, #15]
 800110e:	6879      	ldr	r1, [r7, #4]
 8001110:	4613      	mov	r3, r2
 8001112:	00db      	lsls	r3, r3, #3
 8001114:	4413      	add	r3, r2
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	440b      	add	r3, r1
 800111a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001122:	7bfa      	ldrb	r2, [r7, #15]
 8001124:	6879      	ldr	r1, [r7, #4]
 8001126:	4613      	mov	r3, r2
 8001128:	00db      	lsls	r3, r3, #3
 800112a:	4413      	add	r3, r2
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	440b      	add	r3, r1
 8001130:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001138:	7bfb      	ldrb	r3, [r7, #15]
 800113a:	3301      	adds	r3, #1
 800113c:	73fb      	strb	r3, [r7, #15]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	791b      	ldrb	r3, [r3, #4]
 8001142:	7bfa      	ldrb	r2, [r7, #15]
 8001144:	429a      	cmp	r2, r3
 8001146:	d3b5      	bcc.n	80010b4 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6818      	ldr	r0, [r3, #0]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	7c1a      	ldrb	r2, [r3, #16]
 8001150:	f88d 2000 	strb.w	r2, [sp]
 8001154:	3304      	adds	r3, #4
 8001156:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001158:	f001 fc44 	bl	80029e4 <USB_DevInit>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d005      	beq.n	800116e <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2202      	movs	r2, #2
 8001166:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e013      	b.n	8001196 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2200      	movs	r2, #0
 8001172:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2201      	movs	r2, #1
 8001178:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	7b1b      	ldrb	r3, [r3, #12]
 8001180:	2b01      	cmp	r3, #1
 8001182:	d102      	bne.n	800118a <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f000 f80a 	bl	800119e <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4618      	mov	r0, r3
 8001190:	f001 fde9 	bl	8002d66 <USB_DevDisconnect>

  return HAL_OK;
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800119e:	b480      	push	{r7}
 80011a0:	b085      	sub	sp, #20
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2201      	movs	r2, #1
 80011b0:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2200      	movs	r2, #0
 80011b8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011d0:	f043 0303 	orr.w	r3, r3, #3
 80011d4:	68fa      	ldr	r2, [r7, #12]
 80011d6:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3714      	adds	r7, #20
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
	...

080011e8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80011ec:	4b05      	ldr	r3, [pc, #20]	@ (8001204 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a04      	ldr	r2, [pc, #16]	@ (8001204 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80011f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011f6:	6013      	str	r3, [r2, #0]
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	40007000 	.word	0x40007000

08001208 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800120c:	4b04      	ldr	r3, [pc, #16]	@ (8001220 <HAL_PWREx_GetVoltageRange+0x18>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001214:	4618      	mov	r0, r3
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	40007000 	.word	0x40007000

08001224 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001224:	b480      	push	{r7}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001232:	d130      	bne.n	8001296 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001234:	4b23      	ldr	r3, [pc, #140]	@ (80012c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800123c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001240:	d038      	beq.n	80012b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001242:	4b20      	ldr	r3, [pc, #128]	@ (80012c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800124a:	4a1e      	ldr	r2, [pc, #120]	@ (80012c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800124c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001250:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001252:	4b1d      	ldr	r3, [pc, #116]	@ (80012c8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	2232      	movs	r2, #50	@ 0x32
 8001258:	fb02 f303 	mul.w	r3, r2, r3
 800125c:	4a1b      	ldr	r2, [pc, #108]	@ (80012cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800125e:	fba2 2303 	umull	r2, r3, r2, r3
 8001262:	0c9b      	lsrs	r3, r3, #18
 8001264:	3301      	adds	r3, #1
 8001266:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001268:	e002      	b.n	8001270 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	3b01      	subs	r3, #1
 800126e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001270:	4b14      	ldr	r3, [pc, #80]	@ (80012c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001272:	695b      	ldr	r3, [r3, #20]
 8001274:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001278:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800127c:	d102      	bne.n	8001284 <HAL_PWREx_ControlVoltageScaling+0x60>
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d1f2      	bne.n	800126a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001284:	4b0f      	ldr	r3, [pc, #60]	@ (80012c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001286:	695b      	ldr	r3, [r3, #20]
 8001288:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800128c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001290:	d110      	bne.n	80012b4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e00f      	b.n	80012b6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001296:	4b0b      	ldr	r3, [pc, #44]	@ (80012c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800129e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012a2:	d007      	beq.n	80012b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80012a4:	4b07      	ldr	r3, [pc, #28]	@ (80012c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80012ac:	4a05      	ldr	r2, [pc, #20]	@ (80012c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012b2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3714      	adds	r7, #20
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	40007000 	.word	0x40007000
 80012c8:	20000000 	.word	0x20000000
 80012cc:	431bde83 	.word	0x431bde83

080012d0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80012d4:	4b05      	ldr	r3, [pc, #20]	@ (80012ec <HAL_PWREx_EnableVddUSB+0x1c>)
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	4a04      	ldr	r2, [pc, #16]	@ (80012ec <HAL_PWREx_EnableVddUSB+0x1c>)
 80012da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012de:	6053      	str	r3, [r2, #4]
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	40007000 	.word	0x40007000

080012f0 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80012f4:	4b05      	ldr	r3, [pc, #20]	@ (800130c <HAL_PWREx_EnableVddIO2+0x1c>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	4a04      	ldr	r2, [pc, #16]	@ (800130c <HAL_PWREx_EnableVddIO2+0x1c>)
 80012fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012fe:	6053      	str	r3, [r2, #4]
}
 8001300:	bf00      	nop
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	40007000 	.word	0x40007000

08001310 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b088      	sub	sp, #32
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d102      	bne.n	8001324 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	f000 bc08 	b.w	8001b34 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001324:	4b96      	ldr	r3, [pc, #600]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	f003 030c 	and.w	r3, r3, #12
 800132c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800132e:	4b94      	ldr	r3, [pc, #592]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	f003 0303 	and.w	r3, r3, #3
 8001336:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 0310 	and.w	r3, r3, #16
 8001340:	2b00      	cmp	r3, #0
 8001342:	f000 80e4 	beq.w	800150e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d007      	beq.n	800135c <HAL_RCC_OscConfig+0x4c>
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	2b0c      	cmp	r3, #12
 8001350:	f040 808b 	bne.w	800146a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	2b01      	cmp	r3, #1
 8001358:	f040 8087 	bne.w	800146a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800135c:	4b88      	ldr	r3, [pc, #544]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 0302 	and.w	r3, r3, #2
 8001364:	2b00      	cmp	r3, #0
 8001366:	d005      	beq.n	8001374 <HAL_RCC_OscConfig+0x64>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d101      	bne.n	8001374 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e3df      	b.n	8001b34 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6a1a      	ldr	r2, [r3, #32]
 8001378:	4b81      	ldr	r3, [pc, #516]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 0308 	and.w	r3, r3, #8
 8001380:	2b00      	cmp	r3, #0
 8001382:	d004      	beq.n	800138e <HAL_RCC_OscConfig+0x7e>
 8001384:	4b7e      	ldr	r3, [pc, #504]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800138c:	e005      	b.n	800139a <HAL_RCC_OscConfig+0x8a>
 800138e:	4b7c      	ldr	r3, [pc, #496]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 8001390:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001394:	091b      	lsrs	r3, r3, #4
 8001396:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800139a:	4293      	cmp	r3, r2
 800139c:	d223      	bcs.n	80013e6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6a1b      	ldr	r3, [r3, #32]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f000 fd5a 	bl	8001e5c <RCC_SetFlashLatencyFromMSIRange>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e3c0      	b.n	8001b34 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013b2:	4b73      	ldr	r3, [pc, #460]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a72      	ldr	r2, [pc, #456]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 80013b8:	f043 0308 	orr.w	r3, r3, #8
 80013bc:	6013      	str	r3, [r2, #0]
 80013be:	4b70      	ldr	r3, [pc, #448]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6a1b      	ldr	r3, [r3, #32]
 80013ca:	496d      	ldr	r1, [pc, #436]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 80013cc:	4313      	orrs	r3, r2
 80013ce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013d0:	4b6b      	ldr	r3, [pc, #428]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	69db      	ldr	r3, [r3, #28]
 80013dc:	021b      	lsls	r3, r3, #8
 80013de:	4968      	ldr	r1, [pc, #416]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 80013e0:	4313      	orrs	r3, r2
 80013e2:	604b      	str	r3, [r1, #4]
 80013e4:	e025      	b.n	8001432 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013e6:	4b66      	ldr	r3, [pc, #408]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a65      	ldr	r2, [pc, #404]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 80013ec:	f043 0308 	orr.w	r3, r3, #8
 80013f0:	6013      	str	r3, [r2, #0]
 80013f2:	4b63      	ldr	r3, [pc, #396]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6a1b      	ldr	r3, [r3, #32]
 80013fe:	4960      	ldr	r1, [pc, #384]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 8001400:	4313      	orrs	r3, r2
 8001402:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001404:	4b5e      	ldr	r3, [pc, #376]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	69db      	ldr	r3, [r3, #28]
 8001410:	021b      	lsls	r3, r3, #8
 8001412:	495b      	ldr	r1, [pc, #364]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 8001414:	4313      	orrs	r3, r2
 8001416:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d109      	bne.n	8001432 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6a1b      	ldr	r3, [r3, #32]
 8001422:	4618      	mov	r0, r3
 8001424:	f000 fd1a 	bl	8001e5c <RCC_SetFlashLatencyFromMSIRange>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e380      	b.n	8001b34 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001432:	f000 fc87 	bl	8001d44 <HAL_RCC_GetSysClockFreq>
 8001436:	4602      	mov	r2, r0
 8001438:	4b51      	ldr	r3, [pc, #324]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	091b      	lsrs	r3, r3, #4
 800143e:	f003 030f 	and.w	r3, r3, #15
 8001442:	4950      	ldr	r1, [pc, #320]	@ (8001584 <HAL_RCC_OscConfig+0x274>)
 8001444:	5ccb      	ldrb	r3, [r1, r3]
 8001446:	f003 031f 	and.w	r3, r3, #31
 800144a:	fa22 f303 	lsr.w	r3, r2, r3
 800144e:	4a4e      	ldr	r2, [pc, #312]	@ (8001588 <HAL_RCC_OscConfig+0x278>)
 8001450:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001452:	4b4e      	ldr	r3, [pc, #312]	@ (800158c <HAL_RCC_OscConfig+0x27c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff fa82 	bl	8000960 <HAL_InitTick>
 800145c:	4603      	mov	r3, r0
 800145e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001460:	7bfb      	ldrb	r3, [r7, #15]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d052      	beq.n	800150c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001466:	7bfb      	ldrb	r3, [r7, #15]
 8001468:	e364      	b.n	8001b34 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	699b      	ldr	r3, [r3, #24]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d032      	beq.n	80014d8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001472:	4b43      	ldr	r3, [pc, #268]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a42      	ldr	r2, [pc, #264]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800147e:	f7ff fabf 	bl	8000a00 <HAL_GetTick>
 8001482:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001484:	e008      	b.n	8001498 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001486:	f7ff fabb 	bl	8000a00 <HAL_GetTick>
 800148a:	4602      	mov	r2, r0
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b02      	cmp	r3, #2
 8001492:	d901      	bls.n	8001498 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	e34d      	b.n	8001b34 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001498:	4b39      	ldr	r3, [pc, #228]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0302 	and.w	r3, r3, #2
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d0f0      	beq.n	8001486 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014a4:	4b36      	ldr	r3, [pc, #216]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a35      	ldr	r2, [pc, #212]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 80014aa:	f043 0308 	orr.w	r3, r3, #8
 80014ae:	6013      	str	r3, [r2, #0]
 80014b0:	4b33      	ldr	r3, [pc, #204]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a1b      	ldr	r3, [r3, #32]
 80014bc:	4930      	ldr	r1, [pc, #192]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 80014be:	4313      	orrs	r3, r2
 80014c0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014c2:	4b2f      	ldr	r3, [pc, #188]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	69db      	ldr	r3, [r3, #28]
 80014ce:	021b      	lsls	r3, r3, #8
 80014d0:	492b      	ldr	r1, [pc, #172]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 80014d2:	4313      	orrs	r3, r2
 80014d4:	604b      	str	r3, [r1, #4]
 80014d6:	e01a      	b.n	800150e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80014d8:	4b29      	ldr	r3, [pc, #164]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a28      	ldr	r2, [pc, #160]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 80014de:	f023 0301 	bic.w	r3, r3, #1
 80014e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014e4:	f7ff fa8c 	bl	8000a00 <HAL_GetTick>
 80014e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014ea:	e008      	b.n	80014fe <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014ec:	f7ff fa88 	bl	8000a00 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e31a      	b.n	8001b34 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014fe:	4b20      	ldr	r3, [pc, #128]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d1f0      	bne.n	80014ec <HAL_RCC_OscConfig+0x1dc>
 800150a:	e000      	b.n	800150e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800150c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	2b00      	cmp	r3, #0
 8001518:	d073      	beq.n	8001602 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	2b08      	cmp	r3, #8
 800151e:	d005      	beq.n	800152c <HAL_RCC_OscConfig+0x21c>
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	2b0c      	cmp	r3, #12
 8001524:	d10e      	bne.n	8001544 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	2b03      	cmp	r3, #3
 800152a:	d10b      	bne.n	8001544 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800152c:	4b14      	ldr	r3, [pc, #80]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d063      	beq.n	8001600 <HAL_RCC_OscConfig+0x2f0>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d15f      	bne.n	8001600 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	e2f7      	b.n	8001b34 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800154c:	d106      	bne.n	800155c <HAL_RCC_OscConfig+0x24c>
 800154e:	4b0c      	ldr	r3, [pc, #48]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a0b      	ldr	r2, [pc, #44]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 8001554:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001558:	6013      	str	r3, [r2, #0]
 800155a:	e025      	b.n	80015a8 <HAL_RCC_OscConfig+0x298>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001564:	d114      	bne.n	8001590 <HAL_RCC_OscConfig+0x280>
 8001566:	4b06      	ldr	r3, [pc, #24]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a05      	ldr	r2, [pc, #20]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 800156c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001570:	6013      	str	r3, [r2, #0]
 8001572:	4b03      	ldr	r3, [pc, #12]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a02      	ldr	r2, [pc, #8]	@ (8001580 <HAL_RCC_OscConfig+0x270>)
 8001578:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800157c:	6013      	str	r3, [r2, #0]
 800157e:	e013      	b.n	80015a8 <HAL_RCC_OscConfig+0x298>
 8001580:	40021000 	.word	0x40021000
 8001584:	08002e98 	.word	0x08002e98
 8001588:	20000000 	.word	0x20000000
 800158c:	20000004 	.word	0x20000004
 8001590:	4ba0      	ldr	r3, [pc, #640]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a9f      	ldr	r2, [pc, #636]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 8001596:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800159a:	6013      	str	r3, [r2, #0]
 800159c:	4b9d      	ldr	r3, [pc, #628]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a9c      	ldr	r2, [pc, #624]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 80015a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d013      	beq.n	80015d8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b0:	f7ff fa26 	bl	8000a00 <HAL_GetTick>
 80015b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015b6:	e008      	b.n	80015ca <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015b8:	f7ff fa22 	bl	8000a00 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b64      	cmp	r3, #100	@ 0x64
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e2b4      	b.n	8001b34 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015ca:	4b92      	ldr	r3, [pc, #584]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d0f0      	beq.n	80015b8 <HAL_RCC_OscConfig+0x2a8>
 80015d6:	e014      	b.n	8001602 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d8:	f7ff fa12 	bl	8000a00 <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015de:	e008      	b.n	80015f2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015e0:	f7ff fa0e 	bl	8000a00 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b64      	cmp	r3, #100	@ 0x64
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e2a0      	b.n	8001b34 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015f2:	4b88      	ldr	r3, [pc, #544]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1f0      	bne.n	80015e0 <HAL_RCC_OscConfig+0x2d0>
 80015fe:	e000      	b.n	8001602 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001600:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d060      	beq.n	80016d0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	2b04      	cmp	r3, #4
 8001612:	d005      	beq.n	8001620 <HAL_RCC_OscConfig+0x310>
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	2b0c      	cmp	r3, #12
 8001618:	d119      	bne.n	800164e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	2b02      	cmp	r3, #2
 800161e:	d116      	bne.n	800164e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001620:	4b7c      	ldr	r3, [pc, #496]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001628:	2b00      	cmp	r3, #0
 800162a:	d005      	beq.n	8001638 <HAL_RCC_OscConfig+0x328>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d101      	bne.n	8001638 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e27d      	b.n	8001b34 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001638:	4b76      	ldr	r3, [pc, #472]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	691b      	ldr	r3, [r3, #16]
 8001644:	061b      	lsls	r3, r3, #24
 8001646:	4973      	ldr	r1, [pc, #460]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 8001648:	4313      	orrs	r3, r2
 800164a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800164c:	e040      	b.n	80016d0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d023      	beq.n	800169e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001656:	4b6f      	ldr	r3, [pc, #444]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a6e      	ldr	r2, [pc, #440]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 800165c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001660:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001662:	f7ff f9cd 	bl	8000a00 <HAL_GetTick>
 8001666:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001668:	e008      	b.n	800167c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800166a:	f7ff f9c9 	bl	8000a00 <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e25b      	b.n	8001b34 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800167c:	4b65      	ldr	r3, [pc, #404]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001684:	2b00      	cmp	r3, #0
 8001686:	d0f0      	beq.n	800166a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001688:	4b62      	ldr	r3, [pc, #392]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	691b      	ldr	r3, [r3, #16]
 8001694:	061b      	lsls	r3, r3, #24
 8001696:	495f      	ldr	r1, [pc, #380]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 8001698:	4313      	orrs	r3, r2
 800169a:	604b      	str	r3, [r1, #4]
 800169c:	e018      	b.n	80016d0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800169e:	4b5d      	ldr	r3, [pc, #372]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a5c      	ldr	r2, [pc, #368]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 80016a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80016a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016aa:	f7ff f9a9 	bl	8000a00 <HAL_GetTick>
 80016ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016b0:	e008      	b.n	80016c4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016b2:	f7ff f9a5 	bl	8000a00 <HAL_GetTick>
 80016b6:	4602      	mov	r2, r0
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d901      	bls.n	80016c4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80016c0:	2303      	movs	r3, #3
 80016c2:	e237      	b.n	8001b34 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016c4:	4b53      	ldr	r3, [pc, #332]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d1f0      	bne.n	80016b2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0308 	and.w	r3, r3, #8
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d03c      	beq.n	8001756 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	695b      	ldr	r3, [r3, #20]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d01c      	beq.n	800171e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016e4:	4b4b      	ldr	r3, [pc, #300]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 80016e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016ea:	4a4a      	ldr	r2, [pc, #296]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 80016ec:	f043 0301 	orr.w	r3, r3, #1
 80016f0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016f4:	f7ff f984 	bl	8000a00 <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016fa:	e008      	b.n	800170e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016fc:	f7ff f980 	bl	8000a00 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b02      	cmp	r3, #2
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e212      	b.n	8001b34 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800170e:	4b41      	ldr	r3, [pc, #260]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 8001710:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001714:	f003 0302 	and.w	r3, r3, #2
 8001718:	2b00      	cmp	r3, #0
 800171a:	d0ef      	beq.n	80016fc <HAL_RCC_OscConfig+0x3ec>
 800171c:	e01b      	b.n	8001756 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800171e:	4b3d      	ldr	r3, [pc, #244]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 8001720:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001724:	4a3b      	ldr	r2, [pc, #236]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 8001726:	f023 0301 	bic.w	r3, r3, #1
 800172a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800172e:	f7ff f967 	bl	8000a00 <HAL_GetTick>
 8001732:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001734:	e008      	b.n	8001748 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001736:	f7ff f963 	bl	8000a00 <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	2b02      	cmp	r3, #2
 8001742:	d901      	bls.n	8001748 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e1f5      	b.n	8001b34 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001748:	4b32      	ldr	r3, [pc, #200]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 800174a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1ef      	bne.n	8001736 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0304 	and.w	r3, r3, #4
 800175e:	2b00      	cmp	r3, #0
 8001760:	f000 80a6 	beq.w	80018b0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001764:	2300      	movs	r3, #0
 8001766:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001768:	4b2a      	ldr	r3, [pc, #168]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 800176a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800176c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d10d      	bne.n	8001790 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001774:	4b27      	ldr	r3, [pc, #156]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 8001776:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001778:	4a26      	ldr	r2, [pc, #152]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 800177a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800177e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001780:	4b24      	ldr	r3, [pc, #144]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 8001782:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001784:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001788:	60bb      	str	r3, [r7, #8]
 800178a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800178c:	2301      	movs	r3, #1
 800178e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001790:	4b21      	ldr	r3, [pc, #132]	@ (8001818 <HAL_RCC_OscConfig+0x508>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001798:	2b00      	cmp	r3, #0
 800179a:	d118      	bne.n	80017ce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800179c:	4b1e      	ldr	r3, [pc, #120]	@ (8001818 <HAL_RCC_OscConfig+0x508>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a1d      	ldr	r2, [pc, #116]	@ (8001818 <HAL_RCC_OscConfig+0x508>)
 80017a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017a8:	f7ff f92a 	bl	8000a00 <HAL_GetTick>
 80017ac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017b0:	f7ff f926 	bl	8000a00 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e1b8      	b.n	8001b34 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017c2:	4b15      	ldr	r3, [pc, #84]	@ (8001818 <HAL_RCC_OscConfig+0x508>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d0f0      	beq.n	80017b0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d108      	bne.n	80017e8 <HAL_RCC_OscConfig+0x4d8>
 80017d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 80017d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 80017de:	f043 0301 	orr.w	r3, r3, #1
 80017e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017e6:	e029      	b.n	800183c <HAL_RCC_OscConfig+0x52c>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	2b05      	cmp	r3, #5
 80017ee:	d115      	bne.n	800181c <HAL_RCC_OscConfig+0x50c>
 80017f0:	4b08      	ldr	r3, [pc, #32]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 80017f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017f6:	4a07      	ldr	r2, [pc, #28]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 80017f8:	f043 0304 	orr.w	r3, r3, #4
 80017fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001800:	4b04      	ldr	r3, [pc, #16]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 8001802:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001806:	4a03      	ldr	r2, [pc, #12]	@ (8001814 <HAL_RCC_OscConfig+0x504>)
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001810:	e014      	b.n	800183c <HAL_RCC_OscConfig+0x52c>
 8001812:	bf00      	nop
 8001814:	40021000 	.word	0x40021000
 8001818:	40007000 	.word	0x40007000
 800181c:	4b9d      	ldr	r3, [pc, #628]	@ (8001a94 <HAL_RCC_OscConfig+0x784>)
 800181e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001822:	4a9c      	ldr	r2, [pc, #624]	@ (8001a94 <HAL_RCC_OscConfig+0x784>)
 8001824:	f023 0301 	bic.w	r3, r3, #1
 8001828:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800182c:	4b99      	ldr	r3, [pc, #612]	@ (8001a94 <HAL_RCC_OscConfig+0x784>)
 800182e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001832:	4a98      	ldr	r2, [pc, #608]	@ (8001a94 <HAL_RCC_OscConfig+0x784>)
 8001834:	f023 0304 	bic.w	r3, r3, #4
 8001838:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d016      	beq.n	8001872 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001844:	f7ff f8dc 	bl	8000a00 <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800184a:	e00a      	b.n	8001862 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800184c:	f7ff f8d8 	bl	8000a00 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	f241 3288 	movw	r2, #5000	@ 0x1388
 800185a:	4293      	cmp	r3, r2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e168      	b.n	8001b34 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001862:	4b8c      	ldr	r3, [pc, #560]	@ (8001a94 <HAL_RCC_OscConfig+0x784>)
 8001864:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001868:	f003 0302 	and.w	r3, r3, #2
 800186c:	2b00      	cmp	r3, #0
 800186e:	d0ed      	beq.n	800184c <HAL_RCC_OscConfig+0x53c>
 8001870:	e015      	b.n	800189e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001872:	f7ff f8c5 	bl	8000a00 <HAL_GetTick>
 8001876:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001878:	e00a      	b.n	8001890 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800187a:	f7ff f8c1 	bl	8000a00 <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001888:	4293      	cmp	r3, r2
 800188a:	d901      	bls.n	8001890 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e151      	b.n	8001b34 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001890:	4b80      	ldr	r3, [pc, #512]	@ (8001a94 <HAL_RCC_OscConfig+0x784>)
 8001892:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1ed      	bne.n	800187a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800189e:	7ffb      	ldrb	r3, [r7, #31]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d105      	bne.n	80018b0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018a4:	4b7b      	ldr	r3, [pc, #492]	@ (8001a94 <HAL_RCC_OscConfig+0x784>)
 80018a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018a8:	4a7a      	ldr	r2, [pc, #488]	@ (8001a94 <HAL_RCC_OscConfig+0x784>)
 80018aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80018ae:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0320 	and.w	r3, r3, #32
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d03c      	beq.n	8001936 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d01c      	beq.n	80018fe <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80018c4:	4b73      	ldr	r3, [pc, #460]	@ (8001a94 <HAL_RCC_OscConfig+0x784>)
 80018c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80018ca:	4a72      	ldr	r2, [pc, #456]	@ (8001a94 <HAL_RCC_OscConfig+0x784>)
 80018cc:	f043 0301 	orr.w	r3, r3, #1
 80018d0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d4:	f7ff f894 	bl	8000a00 <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018dc:	f7ff f890 	bl	8000a00 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e122      	b.n	8001b34 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018ee:	4b69      	ldr	r3, [pc, #420]	@ (8001a94 <HAL_RCC_OscConfig+0x784>)
 80018f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80018f4:	f003 0302 	and.w	r3, r3, #2
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d0ef      	beq.n	80018dc <HAL_RCC_OscConfig+0x5cc>
 80018fc:	e01b      	b.n	8001936 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80018fe:	4b65      	ldr	r3, [pc, #404]	@ (8001a94 <HAL_RCC_OscConfig+0x784>)
 8001900:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001904:	4a63      	ldr	r2, [pc, #396]	@ (8001a94 <HAL_RCC_OscConfig+0x784>)
 8001906:	f023 0301 	bic.w	r3, r3, #1
 800190a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800190e:	f7ff f877 	bl	8000a00 <HAL_GetTick>
 8001912:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001914:	e008      	b.n	8001928 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001916:	f7ff f873 	bl	8000a00 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d901      	bls.n	8001928 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e105      	b.n	8001b34 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001928:	4b5a      	ldr	r3, [pc, #360]	@ (8001a94 <HAL_RCC_OscConfig+0x784>)
 800192a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1ef      	bne.n	8001916 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800193a:	2b00      	cmp	r3, #0
 800193c:	f000 80f9 	beq.w	8001b32 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001944:	2b02      	cmp	r3, #2
 8001946:	f040 80cf 	bne.w	8001ae8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800194a:	4b52      	ldr	r3, [pc, #328]	@ (8001a94 <HAL_RCC_OscConfig+0x784>)
 800194c:	68db      	ldr	r3, [r3, #12]
 800194e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	f003 0203 	and.w	r2, r3, #3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800195a:	429a      	cmp	r2, r3
 800195c:	d12c      	bne.n	80019b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001968:	3b01      	subs	r3, #1
 800196a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800196c:	429a      	cmp	r2, r3
 800196e:	d123      	bne.n	80019b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800197a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800197c:	429a      	cmp	r2, r3
 800197e:	d11b      	bne.n	80019b8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800198a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800198c:	429a      	cmp	r2, r3
 800198e:	d113      	bne.n	80019b8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800199a:	085b      	lsrs	r3, r3, #1
 800199c:	3b01      	subs	r3, #1
 800199e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d109      	bne.n	80019b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ae:	085b      	lsrs	r3, r3, #1
 80019b0:	3b01      	subs	r3, #1
 80019b2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d071      	beq.n	8001a9c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	2b0c      	cmp	r3, #12
 80019bc:	d068      	beq.n	8001a90 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80019be:	4b35      	ldr	r3, [pc, #212]	@ (8001a94 <HAL_RCC_OscConfig+0x784>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d105      	bne.n	80019d6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80019ca:	4b32      	ldr	r3, [pc, #200]	@ (8001a94 <HAL_RCC_OscConfig+0x784>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e0ac      	b.n	8001b34 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80019da:	4b2e      	ldr	r3, [pc, #184]	@ (8001a94 <HAL_RCC_OscConfig+0x784>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a2d      	ldr	r2, [pc, #180]	@ (8001a94 <HAL_RCC_OscConfig+0x784>)
 80019e0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80019e4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019e6:	f7ff f80b 	bl	8000a00 <HAL_GetTick>
 80019ea:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019ec:	e008      	b.n	8001a00 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ee:	f7ff f807 	bl	8000a00 <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e099      	b.n	8001b34 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a00:	4b24      	ldr	r3, [pc, #144]	@ (8001a94 <HAL_RCC_OscConfig+0x784>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d1f0      	bne.n	80019ee <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a0c:	4b21      	ldr	r3, [pc, #132]	@ (8001a94 <HAL_RCC_OscConfig+0x784>)
 8001a0e:	68da      	ldr	r2, [r3, #12]
 8001a10:	4b21      	ldr	r3, [pc, #132]	@ (8001a98 <HAL_RCC_OscConfig+0x788>)
 8001a12:	4013      	ands	r3, r2
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001a1c:	3a01      	subs	r2, #1
 8001a1e:	0112      	lsls	r2, r2, #4
 8001a20:	4311      	orrs	r1, r2
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001a26:	0212      	lsls	r2, r2, #8
 8001a28:	4311      	orrs	r1, r2
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001a2e:	0852      	lsrs	r2, r2, #1
 8001a30:	3a01      	subs	r2, #1
 8001a32:	0552      	lsls	r2, r2, #21
 8001a34:	4311      	orrs	r1, r2
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001a3a:	0852      	lsrs	r2, r2, #1
 8001a3c:	3a01      	subs	r2, #1
 8001a3e:	0652      	lsls	r2, r2, #25
 8001a40:	4311      	orrs	r1, r2
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001a46:	06d2      	lsls	r2, r2, #27
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	4912      	ldr	r1, [pc, #72]	@ (8001a94 <HAL_RCC_OscConfig+0x784>)
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a50:	4b10      	ldr	r3, [pc, #64]	@ (8001a94 <HAL_RCC_OscConfig+0x784>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a0f      	ldr	r2, [pc, #60]	@ (8001a94 <HAL_RCC_OscConfig+0x784>)
 8001a56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a5a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a5c:	4b0d      	ldr	r3, [pc, #52]	@ (8001a94 <HAL_RCC_OscConfig+0x784>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	4a0c      	ldr	r2, [pc, #48]	@ (8001a94 <HAL_RCC_OscConfig+0x784>)
 8001a62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a66:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a68:	f7fe ffca 	bl	8000a00 <HAL_GetTick>
 8001a6c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a6e:	e008      	b.n	8001a82 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a70:	f7fe ffc6 	bl	8000a00 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e058      	b.n	8001b34 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a82:	4b04      	ldr	r3, [pc, #16]	@ (8001a94 <HAL_RCC_OscConfig+0x784>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d0f0      	beq.n	8001a70 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a8e:	e050      	b.n	8001b32 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e04f      	b.n	8001b34 <HAL_RCC_OscConfig+0x824>
 8001a94:	40021000 	.word	0x40021000
 8001a98:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a9c:	4b27      	ldr	r3, [pc, #156]	@ (8001b3c <HAL_RCC_OscConfig+0x82c>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d144      	bne.n	8001b32 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001aa8:	4b24      	ldr	r3, [pc, #144]	@ (8001b3c <HAL_RCC_OscConfig+0x82c>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a23      	ldr	r2, [pc, #140]	@ (8001b3c <HAL_RCC_OscConfig+0x82c>)
 8001aae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ab2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ab4:	4b21      	ldr	r3, [pc, #132]	@ (8001b3c <HAL_RCC_OscConfig+0x82c>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	4a20      	ldr	r2, [pc, #128]	@ (8001b3c <HAL_RCC_OscConfig+0x82c>)
 8001aba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001abe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ac0:	f7fe ff9e 	bl	8000a00 <HAL_GetTick>
 8001ac4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ac6:	e008      	b.n	8001ada <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ac8:	f7fe ff9a 	bl	8000a00 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e02c      	b.n	8001b34 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ada:	4b18      	ldr	r3, [pc, #96]	@ (8001b3c <HAL_RCC_OscConfig+0x82c>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d0f0      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x7b8>
 8001ae6:	e024      	b.n	8001b32 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	2b0c      	cmp	r3, #12
 8001aec:	d01f      	beq.n	8001b2e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aee:	4b13      	ldr	r3, [pc, #76]	@ (8001b3c <HAL_RCC_OscConfig+0x82c>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a12      	ldr	r2, [pc, #72]	@ (8001b3c <HAL_RCC_OscConfig+0x82c>)
 8001af4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001af8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001afa:	f7fe ff81 	bl	8000a00 <HAL_GetTick>
 8001afe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b00:	e008      	b.n	8001b14 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b02:	f7fe ff7d 	bl	8000a00 <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e00f      	b.n	8001b34 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b14:	4b09      	ldr	r3, [pc, #36]	@ (8001b3c <HAL_RCC_OscConfig+0x82c>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d1f0      	bne.n	8001b02 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001b20:	4b06      	ldr	r3, [pc, #24]	@ (8001b3c <HAL_RCC_OscConfig+0x82c>)
 8001b22:	68da      	ldr	r2, [r3, #12]
 8001b24:	4905      	ldr	r1, [pc, #20]	@ (8001b3c <HAL_RCC_OscConfig+0x82c>)
 8001b26:	4b06      	ldr	r3, [pc, #24]	@ (8001b40 <HAL_RCC_OscConfig+0x830>)
 8001b28:	4013      	ands	r3, r2
 8001b2a:	60cb      	str	r3, [r1, #12]
 8001b2c:	e001      	b.n	8001b32 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e000      	b.n	8001b34 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001b32:	2300      	movs	r3, #0
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3720      	adds	r7, #32
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	feeefffc 	.word	0xfeeefffc

08001b44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d101      	bne.n	8001b58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e0e7      	b.n	8001d28 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b58:	4b75      	ldr	r3, [pc, #468]	@ (8001d30 <HAL_RCC_ClockConfig+0x1ec>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0307 	and.w	r3, r3, #7
 8001b60:	683a      	ldr	r2, [r7, #0]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d910      	bls.n	8001b88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b66:	4b72      	ldr	r3, [pc, #456]	@ (8001d30 <HAL_RCC_ClockConfig+0x1ec>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f023 0207 	bic.w	r2, r3, #7
 8001b6e:	4970      	ldr	r1, [pc, #448]	@ (8001d30 <HAL_RCC_ClockConfig+0x1ec>)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b76:	4b6e      	ldr	r3, [pc, #440]	@ (8001d30 <HAL_RCC_ClockConfig+0x1ec>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0307 	and.w	r3, r3, #7
 8001b7e:	683a      	ldr	r2, [r7, #0]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d001      	beq.n	8001b88 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e0cf      	b.n	8001d28 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0302 	and.w	r3, r3, #2
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d010      	beq.n	8001bb6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689a      	ldr	r2, [r3, #8]
 8001b98:	4b66      	ldr	r3, [pc, #408]	@ (8001d34 <HAL_RCC_ClockConfig+0x1f0>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d908      	bls.n	8001bb6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ba4:	4b63      	ldr	r3, [pc, #396]	@ (8001d34 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	4960      	ldr	r1, [pc, #384]	@ (8001d34 <HAL_RCC_ClockConfig+0x1f0>)
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d04c      	beq.n	8001c5c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	2b03      	cmp	r3, #3
 8001bc8:	d107      	bne.n	8001bda <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bca:	4b5a      	ldr	r3, [pc, #360]	@ (8001d34 <HAL_RCC_ClockConfig+0x1f0>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d121      	bne.n	8001c1a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e0a6      	b.n	8001d28 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d107      	bne.n	8001bf2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001be2:	4b54      	ldr	r3, [pc, #336]	@ (8001d34 <HAL_RCC_ClockConfig+0x1f0>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d115      	bne.n	8001c1a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e09a      	b.n	8001d28 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d107      	bne.n	8001c0a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bfa:	4b4e      	ldr	r3, [pc, #312]	@ (8001d34 <HAL_RCC_ClockConfig+0x1f0>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d109      	bne.n	8001c1a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e08e      	b.n	8001d28 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c0a:	4b4a      	ldr	r3, [pc, #296]	@ (8001d34 <HAL_RCC_ClockConfig+0x1f0>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e086      	b.n	8001d28 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c1a:	4b46      	ldr	r3, [pc, #280]	@ (8001d34 <HAL_RCC_ClockConfig+0x1f0>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f023 0203 	bic.w	r2, r3, #3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	4943      	ldr	r1, [pc, #268]	@ (8001d34 <HAL_RCC_ClockConfig+0x1f0>)
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c2c:	f7fe fee8 	bl	8000a00 <HAL_GetTick>
 8001c30:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c32:	e00a      	b.n	8001c4a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c34:	f7fe fee4 	bl	8000a00 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e06e      	b.n	8001d28 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c4a:	4b3a      	ldr	r3, [pc, #232]	@ (8001d34 <HAL_RCC_ClockConfig+0x1f0>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f003 020c 	and.w	r2, r3, #12
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d1eb      	bne.n	8001c34 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d010      	beq.n	8001c8a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689a      	ldr	r2, [r3, #8]
 8001c6c:	4b31      	ldr	r3, [pc, #196]	@ (8001d34 <HAL_RCC_ClockConfig+0x1f0>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d208      	bcs.n	8001c8a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c78:	4b2e      	ldr	r3, [pc, #184]	@ (8001d34 <HAL_RCC_ClockConfig+0x1f0>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	492b      	ldr	r1, [pc, #172]	@ (8001d34 <HAL_RCC_ClockConfig+0x1f0>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c8a:	4b29      	ldr	r3, [pc, #164]	@ (8001d30 <HAL_RCC_ClockConfig+0x1ec>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0307 	and.w	r3, r3, #7
 8001c92:	683a      	ldr	r2, [r7, #0]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d210      	bcs.n	8001cba <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c98:	4b25      	ldr	r3, [pc, #148]	@ (8001d30 <HAL_RCC_ClockConfig+0x1ec>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f023 0207 	bic.w	r2, r3, #7
 8001ca0:	4923      	ldr	r1, [pc, #140]	@ (8001d30 <HAL_RCC_ClockConfig+0x1ec>)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ca8:	4b21      	ldr	r3, [pc, #132]	@ (8001d30 <HAL_RCC_ClockConfig+0x1ec>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0307 	and.w	r3, r3, #7
 8001cb0:	683a      	ldr	r2, [r7, #0]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d001      	beq.n	8001cba <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e036      	b.n	8001d28 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0304 	and.w	r3, r3, #4
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d008      	beq.n	8001cd8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cc6:	4b1b      	ldr	r3, [pc, #108]	@ (8001d34 <HAL_RCC_ClockConfig+0x1f0>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	4918      	ldr	r1, [pc, #96]	@ (8001d34 <HAL_RCC_ClockConfig+0x1f0>)
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0308 	and.w	r3, r3, #8
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d009      	beq.n	8001cf8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ce4:	4b13      	ldr	r3, [pc, #76]	@ (8001d34 <HAL_RCC_ClockConfig+0x1f0>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	691b      	ldr	r3, [r3, #16]
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	4910      	ldr	r1, [pc, #64]	@ (8001d34 <HAL_RCC_ClockConfig+0x1f0>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001cf8:	f000 f824 	bl	8001d44 <HAL_RCC_GetSysClockFreq>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8001d34 <HAL_RCC_ClockConfig+0x1f0>)
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	091b      	lsrs	r3, r3, #4
 8001d04:	f003 030f 	and.w	r3, r3, #15
 8001d08:	490b      	ldr	r1, [pc, #44]	@ (8001d38 <HAL_RCC_ClockConfig+0x1f4>)
 8001d0a:	5ccb      	ldrb	r3, [r1, r3]
 8001d0c:	f003 031f 	and.w	r3, r3, #31
 8001d10:	fa22 f303 	lsr.w	r3, r2, r3
 8001d14:	4a09      	ldr	r2, [pc, #36]	@ (8001d3c <HAL_RCC_ClockConfig+0x1f8>)
 8001d16:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d18:	4b09      	ldr	r3, [pc, #36]	@ (8001d40 <HAL_RCC_ClockConfig+0x1fc>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7fe fe1f 	bl	8000960 <HAL_InitTick>
 8001d22:	4603      	mov	r3, r0
 8001d24:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d26:	7afb      	ldrb	r3, [r7, #11]
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3710      	adds	r7, #16
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40022000 	.word	0x40022000
 8001d34:	40021000 	.word	0x40021000
 8001d38:	08002e98 	.word	0x08002e98
 8001d3c:	20000000 	.word	0x20000000
 8001d40:	20000004 	.word	0x20000004

08001d44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b089      	sub	sp, #36	@ 0x24
 8001d48:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	61fb      	str	r3, [r7, #28]
 8001d4e:	2300      	movs	r3, #0
 8001d50:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d52:	4b3e      	ldr	r3, [pc, #248]	@ (8001e4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f003 030c 	and.w	r3, r3, #12
 8001d5a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d5c:	4b3b      	ldr	r3, [pc, #236]	@ (8001e4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	f003 0303 	and.w	r3, r3, #3
 8001d64:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d005      	beq.n	8001d78 <HAL_RCC_GetSysClockFreq+0x34>
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	2b0c      	cmp	r3, #12
 8001d70:	d121      	bne.n	8001db6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d11e      	bne.n	8001db6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d78:	4b34      	ldr	r3, [pc, #208]	@ (8001e4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0308 	and.w	r3, r3, #8
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d107      	bne.n	8001d94 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d84:	4b31      	ldr	r3, [pc, #196]	@ (8001e4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d8a:	0a1b      	lsrs	r3, r3, #8
 8001d8c:	f003 030f 	and.w	r3, r3, #15
 8001d90:	61fb      	str	r3, [r7, #28]
 8001d92:	e005      	b.n	8001da0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d94:	4b2d      	ldr	r3, [pc, #180]	@ (8001e4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	091b      	lsrs	r3, r3, #4
 8001d9a:	f003 030f 	and.w	r3, r3, #15
 8001d9e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001da0:	4a2b      	ldr	r2, [pc, #172]	@ (8001e50 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d10d      	bne.n	8001dcc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001db4:	e00a      	b.n	8001dcc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	2b04      	cmp	r3, #4
 8001dba:	d102      	bne.n	8001dc2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001dbc:	4b25      	ldr	r3, [pc, #148]	@ (8001e54 <HAL_RCC_GetSysClockFreq+0x110>)
 8001dbe:	61bb      	str	r3, [r7, #24]
 8001dc0:	e004      	b.n	8001dcc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	2b08      	cmp	r3, #8
 8001dc6:	d101      	bne.n	8001dcc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001dc8:	4b23      	ldr	r3, [pc, #140]	@ (8001e58 <HAL_RCC_GetSysClockFreq+0x114>)
 8001dca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	2b0c      	cmp	r3, #12
 8001dd0:	d134      	bne.n	8001e3c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001dd2:	4b1e      	ldr	r3, [pc, #120]	@ (8001e4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	f003 0303 	and.w	r3, r3, #3
 8001dda:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d003      	beq.n	8001dea <HAL_RCC_GetSysClockFreq+0xa6>
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	2b03      	cmp	r3, #3
 8001de6:	d003      	beq.n	8001df0 <HAL_RCC_GetSysClockFreq+0xac>
 8001de8:	e005      	b.n	8001df6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001dea:	4b1a      	ldr	r3, [pc, #104]	@ (8001e54 <HAL_RCC_GetSysClockFreq+0x110>)
 8001dec:	617b      	str	r3, [r7, #20]
      break;
 8001dee:	e005      	b.n	8001dfc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001df0:	4b19      	ldr	r3, [pc, #100]	@ (8001e58 <HAL_RCC_GetSysClockFreq+0x114>)
 8001df2:	617b      	str	r3, [r7, #20]
      break;
 8001df4:	e002      	b.n	8001dfc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	617b      	str	r3, [r7, #20]
      break;
 8001dfa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001dfc:	4b13      	ldr	r3, [pc, #76]	@ (8001e4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	091b      	lsrs	r3, r3, #4
 8001e02:	f003 0307 	and.w	r3, r3, #7
 8001e06:	3301      	adds	r3, #1
 8001e08:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e0a:	4b10      	ldr	r3, [pc, #64]	@ (8001e4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	0a1b      	lsrs	r3, r3, #8
 8001e10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001e14:	697a      	ldr	r2, [r7, #20]
 8001e16:	fb03 f202 	mul.w	r2, r3, r2
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e20:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e22:	4b0a      	ldr	r3, [pc, #40]	@ (8001e4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	0e5b      	lsrs	r3, r3, #25
 8001e28:	f003 0303 	and.w	r3, r3, #3
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e32:	697a      	ldr	r2, [r7, #20]
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e3a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e3c:	69bb      	ldr	r3, [r7, #24]
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3724      	adds	r7, #36	@ 0x24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	08002ea8 	.word	0x08002ea8
 8001e54:	00f42400 	.word	0x00f42400
 8001e58:	007a1200 	.word	0x007a1200

08001e5c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e64:	2300      	movs	r3, #0
 8001e66:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e68:	4b2a      	ldr	r3, [pc, #168]	@ (8001f14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d003      	beq.n	8001e7c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e74:	f7ff f9c8 	bl	8001208 <HAL_PWREx_GetVoltageRange>
 8001e78:	6178      	str	r0, [r7, #20]
 8001e7a:	e014      	b.n	8001ea6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e7c:	4b25      	ldr	r3, [pc, #148]	@ (8001f14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e80:	4a24      	ldr	r2, [pc, #144]	@ (8001f14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e86:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e88:	4b22      	ldr	r3, [pc, #136]	@ (8001f14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e94:	f7ff f9b8 	bl	8001208 <HAL_PWREx_GetVoltageRange>
 8001e98:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e9a:	4b1e      	ldr	r3, [pc, #120]	@ (8001f14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e9e:	4a1d      	ldr	r2, [pc, #116]	@ (8001f14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ea0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ea4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001eac:	d10b      	bne.n	8001ec6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2b80      	cmp	r3, #128	@ 0x80
 8001eb2:	d919      	bls.n	8001ee8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2ba0      	cmp	r3, #160	@ 0xa0
 8001eb8:	d902      	bls.n	8001ec0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001eba:	2302      	movs	r3, #2
 8001ebc:	613b      	str	r3, [r7, #16]
 8001ebe:	e013      	b.n	8001ee8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	613b      	str	r3, [r7, #16]
 8001ec4:	e010      	b.n	8001ee8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2b80      	cmp	r3, #128	@ 0x80
 8001eca:	d902      	bls.n	8001ed2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ecc:	2303      	movs	r3, #3
 8001ece:	613b      	str	r3, [r7, #16]
 8001ed0:	e00a      	b.n	8001ee8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2b80      	cmp	r3, #128	@ 0x80
 8001ed6:	d102      	bne.n	8001ede <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ed8:	2302      	movs	r3, #2
 8001eda:	613b      	str	r3, [r7, #16]
 8001edc:	e004      	b.n	8001ee8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2b70      	cmp	r3, #112	@ 0x70
 8001ee2:	d101      	bne.n	8001ee8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8001f18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f023 0207 	bic.w	r2, r3, #7
 8001ef0:	4909      	ldr	r1, [pc, #36]	@ (8001f18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ef8:	4b07      	ldr	r3, [pc, #28]	@ (8001f18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0307 	and.w	r3, r3, #7
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d001      	beq.n	8001f0a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e000      	b.n	8001f0c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f0a:	2300      	movs	r3, #0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3718      	adds	r7, #24
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40021000 	.word	0x40021000
 8001f18:	40022000 	.word	0x40022000

08001f1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f24:	2300      	movs	r3, #0
 8001f26:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f28:	2300      	movs	r3, #0
 8001f2a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d041      	beq.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f3c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001f40:	d02a      	beq.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001f42:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001f46:	d824      	bhi.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f48:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001f4c:	d008      	beq.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001f4e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001f52:	d81e      	bhi.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d00a      	beq.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001f58:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f5c:	d010      	beq.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001f5e:	e018      	b.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f60:	4b86      	ldr	r3, [pc, #536]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	4a85      	ldr	r2, [pc, #532]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f6a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f6c:	e015      	b.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	3304      	adds	r3, #4
 8001f72:	2100      	movs	r1, #0
 8001f74:	4618      	mov	r0, r3
 8001f76:	f000 fadd 	bl	8002534 <RCCEx_PLLSAI1_Config>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f7e:	e00c      	b.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	3320      	adds	r3, #32
 8001f84:	2100      	movs	r1, #0
 8001f86:	4618      	mov	r0, r3
 8001f88:	f000 fbc6 	bl	8002718 <RCCEx_PLLSAI2_Config>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f90:	e003      	b.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	74fb      	strb	r3, [r7, #19]
      break;
 8001f96:	e000      	b.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001f98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f9a:	7cfb      	ldrb	r3, [r7, #19]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d10b      	bne.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001fa0:	4b76      	ldr	r3, [pc, #472]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fa6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001fae:	4973      	ldr	r1, [pc, #460]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001fb6:	e001      	b.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fb8:	7cfb      	ldrb	r3, [r7, #19]
 8001fba:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d041      	beq.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001fcc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001fd0:	d02a      	beq.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001fd2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001fd6:	d824      	bhi.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001fd8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001fdc:	d008      	beq.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001fde:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001fe2:	d81e      	bhi.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d00a      	beq.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001fe8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fec:	d010      	beq.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001fee:	e018      	b.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001ff0:	4b62      	ldr	r3, [pc, #392]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	4a61      	ldr	r2, [pc, #388]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ff6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ffa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ffc:	e015      	b.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	3304      	adds	r3, #4
 8002002:	2100      	movs	r1, #0
 8002004:	4618      	mov	r0, r3
 8002006:	f000 fa95 	bl	8002534 <RCCEx_PLLSAI1_Config>
 800200a:	4603      	mov	r3, r0
 800200c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800200e:	e00c      	b.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	3320      	adds	r3, #32
 8002014:	2100      	movs	r1, #0
 8002016:	4618      	mov	r0, r3
 8002018:	f000 fb7e 	bl	8002718 <RCCEx_PLLSAI2_Config>
 800201c:	4603      	mov	r3, r0
 800201e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002020:	e003      	b.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	74fb      	strb	r3, [r7, #19]
      break;
 8002026:	e000      	b.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002028:	bf00      	nop
    }

    if(ret == HAL_OK)
 800202a:	7cfb      	ldrb	r3, [r7, #19]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d10b      	bne.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002030:	4b52      	ldr	r3, [pc, #328]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002032:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002036:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800203e:	494f      	ldr	r1, [pc, #316]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002040:	4313      	orrs	r3, r2
 8002042:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002046:	e001      	b.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002048:	7cfb      	ldrb	r3, [r7, #19]
 800204a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002054:	2b00      	cmp	r3, #0
 8002056:	f000 80a0 	beq.w	800219a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800205a:	2300      	movs	r3, #0
 800205c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800205e:	4b47      	ldr	r3, [pc, #284]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002062:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800206a:	2301      	movs	r3, #1
 800206c:	e000      	b.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800206e:	2300      	movs	r3, #0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d00d      	beq.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002074:	4b41      	ldr	r3, [pc, #260]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002076:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002078:	4a40      	ldr	r2, [pc, #256]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800207a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800207e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002080:	4b3e      	ldr	r3, [pc, #248]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002082:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002084:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002088:	60bb      	str	r3, [r7, #8]
 800208a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800208c:	2301      	movs	r3, #1
 800208e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002090:	4b3b      	ldr	r3, [pc, #236]	@ (8002180 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a3a      	ldr	r2, [pc, #232]	@ (8002180 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002096:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800209a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800209c:	f7fe fcb0 	bl	8000a00 <HAL_GetTick>
 80020a0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020a2:	e009      	b.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020a4:	f7fe fcac 	bl	8000a00 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d902      	bls.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	74fb      	strb	r3, [r7, #19]
        break;
 80020b6:	e005      	b.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020b8:	4b31      	ldr	r3, [pc, #196]	@ (8002180 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d0ef      	beq.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80020c4:	7cfb      	ldrb	r3, [r7, #19]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d15c      	bne.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80020ca:	4b2c      	ldr	r3, [pc, #176]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020d4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d01f      	beq.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020e2:	697a      	ldr	r2, [r7, #20]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d019      	beq.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020e8:	4b24      	ldr	r3, [pc, #144]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80020f4:	4b21      	ldr	r3, [pc, #132]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020fa:	4a20      	ldr	r2, [pc, #128]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002100:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002104:	4b1d      	ldr	r3, [pc, #116]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002106:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800210a:	4a1c      	ldr	r2, [pc, #112]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800210c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002110:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002114:	4a19      	ldr	r2, [pc, #100]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	2b00      	cmp	r3, #0
 8002124:	d016      	beq.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002126:	f7fe fc6b 	bl	8000a00 <HAL_GetTick>
 800212a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800212c:	e00b      	b.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800212e:	f7fe fc67 	bl	8000a00 <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	f241 3288 	movw	r2, #5000	@ 0x1388
 800213c:	4293      	cmp	r3, r2
 800213e:	d902      	bls.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	74fb      	strb	r3, [r7, #19]
            break;
 8002144:	e006      	b.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002146:	4b0d      	ldr	r3, [pc, #52]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002148:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d0ec      	beq.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002154:	7cfb      	ldrb	r3, [r7, #19]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d10c      	bne.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800215a:	4b08      	ldr	r3, [pc, #32]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800215c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002160:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800216a:	4904      	ldr	r1, [pc, #16]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800216c:	4313      	orrs	r3, r2
 800216e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002172:	e009      	b.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002174:	7cfb      	ldrb	r3, [r7, #19]
 8002176:	74bb      	strb	r3, [r7, #18]
 8002178:	e006      	b.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800217a:	bf00      	nop
 800217c:	40021000 	.word	0x40021000
 8002180:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002184:	7cfb      	ldrb	r3, [r7, #19]
 8002186:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002188:	7c7b      	ldrb	r3, [r7, #17]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d105      	bne.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800218e:	4ba6      	ldr	r3, [pc, #664]	@ (8002428 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002190:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002192:	4aa5      	ldr	r2, [pc, #660]	@ (8002428 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002194:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002198:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00a      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021a6:	4ba0      	ldr	r3, [pc, #640]	@ (8002428 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ac:	f023 0203 	bic.w	r2, r3, #3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021b4:	499c      	ldr	r1, [pc, #624]	@ (8002428 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d00a      	beq.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021c8:	4b97      	ldr	r3, [pc, #604]	@ (8002428 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ce:	f023 020c 	bic.w	r2, r3, #12
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021d6:	4994      	ldr	r1, [pc, #592]	@ (8002428 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0304 	and.w	r3, r3, #4
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d00a      	beq.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021ea:	4b8f      	ldr	r3, [pc, #572]	@ (8002428 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021f0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f8:	498b      	ldr	r1, [pc, #556]	@ (8002428 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0308 	and.w	r3, r3, #8
 8002208:	2b00      	cmp	r3, #0
 800220a:	d00a      	beq.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800220c:	4b86      	ldr	r3, [pc, #536]	@ (8002428 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800220e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002212:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800221a:	4983      	ldr	r1, [pc, #524]	@ (8002428 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800221c:	4313      	orrs	r3, r2
 800221e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0310 	and.w	r3, r3, #16
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00a      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800222e:	4b7e      	ldr	r3, [pc, #504]	@ (8002428 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002230:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002234:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800223c:	497a      	ldr	r1, [pc, #488]	@ (8002428 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800223e:	4313      	orrs	r3, r2
 8002240:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0320 	and.w	r3, r3, #32
 800224c:	2b00      	cmp	r3, #0
 800224e:	d00a      	beq.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002250:	4b75      	ldr	r3, [pc, #468]	@ (8002428 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002252:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002256:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800225e:	4972      	ldr	r1, [pc, #456]	@ (8002428 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002260:	4313      	orrs	r3, r2
 8002262:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00a      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002272:	4b6d      	ldr	r3, [pc, #436]	@ (8002428 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002274:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002278:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002280:	4969      	ldr	r1, [pc, #420]	@ (8002428 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002282:	4313      	orrs	r3, r2
 8002284:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002290:	2b00      	cmp	r3, #0
 8002292:	d00a      	beq.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002294:	4b64      	ldr	r3, [pc, #400]	@ (8002428 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002296:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800229a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80022a2:	4961      	ldr	r1, [pc, #388]	@ (8002428 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00a      	beq.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022b6:	4b5c      	ldr	r3, [pc, #368]	@ (8002428 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022bc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022c4:	4958      	ldr	r1, [pc, #352]	@ (8002428 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d00a      	beq.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80022d8:	4b53      	ldr	r3, [pc, #332]	@ (8002428 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022de:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022e6:	4950      	ldr	r1, [pc, #320]	@ (8002428 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00a      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022fa:	4b4b      	ldr	r3, [pc, #300]	@ (8002428 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002300:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002308:	4947      	ldr	r1, [pc, #284]	@ (8002428 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800230a:	4313      	orrs	r3, r2
 800230c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d00a      	beq.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800231c:	4b42      	ldr	r3, [pc, #264]	@ (8002428 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800231e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002322:	f023 0203 	bic.w	r2, r3, #3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800232a:	493f      	ldr	r1, [pc, #252]	@ (8002428 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800232c:	4313      	orrs	r3, r2
 800232e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d028      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800233e:	4b3a      	ldr	r3, [pc, #232]	@ (8002428 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002340:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002344:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800234c:	4936      	ldr	r1, [pc, #216]	@ (8002428 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800234e:	4313      	orrs	r3, r2
 8002350:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002358:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800235c:	d106      	bne.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800235e:	4b32      	ldr	r3, [pc, #200]	@ (8002428 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	4a31      	ldr	r2, [pc, #196]	@ (8002428 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002364:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002368:	60d3      	str	r3, [r2, #12]
 800236a:	e011      	b.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002370:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002374:	d10c      	bne.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	3304      	adds	r3, #4
 800237a:	2101      	movs	r1, #1
 800237c:	4618      	mov	r0, r3
 800237e:	f000 f8d9 	bl	8002534 <RCCEx_PLLSAI1_Config>
 8002382:	4603      	mov	r3, r0
 8002384:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002386:	7cfb      	ldrb	r3, [r7, #19]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 800238c:	7cfb      	ldrb	r3, [r7, #19]
 800238e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d028      	beq.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800239c:	4b22      	ldr	r3, [pc, #136]	@ (8002428 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800239e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023a2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023aa:	491f      	ldr	r1, [pc, #124]	@ (8002428 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80023ba:	d106      	bne.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023bc:	4b1a      	ldr	r3, [pc, #104]	@ (8002428 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	4a19      	ldr	r2, [pc, #100]	@ (8002428 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023c6:	60d3      	str	r3, [r2, #12]
 80023c8:	e011      	b.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023ce:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80023d2:	d10c      	bne.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3304      	adds	r3, #4
 80023d8:	2101      	movs	r1, #1
 80023da:	4618      	mov	r0, r3
 80023dc:	f000 f8aa 	bl	8002534 <RCCEx_PLLSAI1_Config>
 80023e0:	4603      	mov	r3, r0
 80023e2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023e4:	7cfb      	ldrb	r3, [r7, #19]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 80023ea:	7cfb      	ldrb	r3, [r7, #19]
 80023ec:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d02a      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80023fa:	4b0b      	ldr	r3, [pc, #44]	@ (8002428 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002400:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002408:	4907      	ldr	r1, [pc, #28]	@ (8002428 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800240a:	4313      	orrs	r3, r2
 800240c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002414:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002418:	d108      	bne.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800241a:	4b03      	ldr	r3, [pc, #12]	@ (8002428 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	4a02      	ldr	r2, [pc, #8]	@ (8002428 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002420:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002424:	60d3      	str	r3, [r2, #12]
 8002426:	e013      	b.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8002428:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002430:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002434:	d10c      	bne.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	3304      	adds	r3, #4
 800243a:	2101      	movs	r1, #1
 800243c:	4618      	mov	r0, r3
 800243e:	f000 f879 	bl	8002534 <RCCEx_PLLSAI1_Config>
 8002442:	4603      	mov	r3, r0
 8002444:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002446:	7cfb      	ldrb	r3, [r7, #19]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 800244c:	7cfb      	ldrb	r3, [r7, #19]
 800244e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d02f      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800245c:	4b2c      	ldr	r3, [pc, #176]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800245e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002462:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800246a:	4929      	ldr	r1, [pc, #164]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800246c:	4313      	orrs	r3, r2
 800246e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002476:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800247a:	d10d      	bne.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3304      	adds	r3, #4
 8002480:	2102      	movs	r1, #2
 8002482:	4618      	mov	r0, r3
 8002484:	f000 f856 	bl	8002534 <RCCEx_PLLSAI1_Config>
 8002488:	4603      	mov	r3, r0
 800248a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800248c:	7cfb      	ldrb	r3, [r7, #19]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d014      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002492:	7cfb      	ldrb	r3, [r7, #19]
 8002494:	74bb      	strb	r3, [r7, #18]
 8002496:	e011      	b.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800249c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80024a0:	d10c      	bne.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	3320      	adds	r3, #32
 80024a6:	2102      	movs	r1, #2
 80024a8:	4618      	mov	r0, r3
 80024aa:	f000 f935 	bl	8002718 <RCCEx_PLLSAI2_Config>
 80024ae:	4603      	mov	r3, r0
 80024b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024b2:	7cfb      	ldrb	r3, [r7, #19]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80024b8:	7cfb      	ldrb	r3, [r7, #19]
 80024ba:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d00b      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80024c8:	4b11      	ldr	r3, [pc, #68]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80024ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ce:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80024d8:	490d      	ldr	r1, [pc, #52]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d00b      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80024ec:	4b08      	ldr	r3, [pc, #32]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80024ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024f2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80024fc:	4904      	ldr	r1, [pc, #16]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002504:	7cbb      	ldrb	r3, [r7, #18]
}
 8002506:	4618      	mov	r0, r3
 8002508:	3718      	adds	r7, #24
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	40021000 	.word	0x40021000

08002514 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002518:	4b05      	ldr	r3, [pc, #20]	@ (8002530 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a04      	ldr	r2, [pc, #16]	@ (8002530 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800251e:	f043 0304 	orr.w	r3, r3, #4
 8002522:	6013      	str	r3, [r2, #0]
}
 8002524:	bf00      	nop
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	40021000 	.word	0x40021000

08002534 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800253e:	2300      	movs	r3, #0
 8002540:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002542:	4b74      	ldr	r3, [pc, #464]	@ (8002714 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	f003 0303 	and.w	r3, r3, #3
 800254a:	2b00      	cmp	r3, #0
 800254c:	d018      	beq.n	8002580 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800254e:	4b71      	ldr	r3, [pc, #452]	@ (8002714 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	f003 0203 	and.w	r2, r3, #3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	429a      	cmp	r2, r3
 800255c:	d10d      	bne.n	800257a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
       ||
 8002562:	2b00      	cmp	r3, #0
 8002564:	d009      	beq.n	800257a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002566:	4b6b      	ldr	r3, [pc, #428]	@ (8002714 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	091b      	lsrs	r3, r3, #4
 800256c:	f003 0307 	and.w	r3, r3, #7
 8002570:	1c5a      	adds	r2, r3, #1
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
       ||
 8002576:	429a      	cmp	r2, r3
 8002578:	d047      	beq.n	800260a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	73fb      	strb	r3, [r7, #15]
 800257e:	e044      	b.n	800260a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2b03      	cmp	r3, #3
 8002586:	d018      	beq.n	80025ba <RCCEx_PLLSAI1_Config+0x86>
 8002588:	2b03      	cmp	r3, #3
 800258a:	d825      	bhi.n	80025d8 <RCCEx_PLLSAI1_Config+0xa4>
 800258c:	2b01      	cmp	r3, #1
 800258e:	d002      	beq.n	8002596 <RCCEx_PLLSAI1_Config+0x62>
 8002590:	2b02      	cmp	r3, #2
 8002592:	d009      	beq.n	80025a8 <RCCEx_PLLSAI1_Config+0x74>
 8002594:	e020      	b.n	80025d8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002596:	4b5f      	ldr	r3, [pc, #380]	@ (8002714 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d11d      	bne.n	80025de <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025a6:	e01a      	b.n	80025de <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80025a8:	4b5a      	ldr	r3, [pc, #360]	@ (8002714 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d116      	bne.n	80025e2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025b8:	e013      	b.n	80025e2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80025ba:	4b56      	ldr	r3, [pc, #344]	@ (8002714 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d10f      	bne.n	80025e6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80025c6:	4b53      	ldr	r3, [pc, #332]	@ (8002714 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d109      	bne.n	80025e6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80025d6:	e006      	b.n	80025e6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	73fb      	strb	r3, [r7, #15]
      break;
 80025dc:	e004      	b.n	80025e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025de:	bf00      	nop
 80025e0:	e002      	b.n	80025e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025e2:	bf00      	nop
 80025e4:	e000      	b.n	80025e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80025e8:	7bfb      	ldrb	r3, [r7, #15]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d10d      	bne.n	800260a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80025ee:	4b49      	ldr	r3, [pc, #292]	@ (8002714 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6819      	ldr	r1, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	3b01      	subs	r3, #1
 8002600:	011b      	lsls	r3, r3, #4
 8002602:	430b      	orrs	r3, r1
 8002604:	4943      	ldr	r1, [pc, #268]	@ (8002714 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002606:	4313      	orrs	r3, r2
 8002608:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800260a:	7bfb      	ldrb	r3, [r7, #15]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d17c      	bne.n	800270a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002610:	4b40      	ldr	r3, [pc, #256]	@ (8002714 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a3f      	ldr	r2, [pc, #252]	@ (8002714 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002616:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800261a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800261c:	f7fe f9f0 	bl	8000a00 <HAL_GetTick>
 8002620:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002622:	e009      	b.n	8002638 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002624:	f7fe f9ec 	bl	8000a00 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d902      	bls.n	8002638 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	73fb      	strb	r3, [r7, #15]
        break;
 8002636:	e005      	b.n	8002644 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002638:	4b36      	ldr	r3, [pc, #216]	@ (8002714 <RCCEx_PLLSAI1_Config+0x1e0>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1ef      	bne.n	8002624 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002644:	7bfb      	ldrb	r3, [r7, #15]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d15f      	bne.n	800270a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d110      	bne.n	8002672 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002650:	4b30      	ldr	r3, [pc, #192]	@ (8002714 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002658:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	6892      	ldr	r2, [r2, #8]
 8002660:	0211      	lsls	r1, r2, #8
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	68d2      	ldr	r2, [r2, #12]
 8002666:	06d2      	lsls	r2, r2, #27
 8002668:	430a      	orrs	r2, r1
 800266a:	492a      	ldr	r1, [pc, #168]	@ (8002714 <RCCEx_PLLSAI1_Config+0x1e0>)
 800266c:	4313      	orrs	r3, r2
 800266e:	610b      	str	r3, [r1, #16]
 8002670:	e027      	b.n	80026c2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d112      	bne.n	800269e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002678:	4b26      	ldr	r3, [pc, #152]	@ (8002714 <RCCEx_PLLSAI1_Config+0x1e0>)
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002680:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	6892      	ldr	r2, [r2, #8]
 8002688:	0211      	lsls	r1, r2, #8
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	6912      	ldr	r2, [r2, #16]
 800268e:	0852      	lsrs	r2, r2, #1
 8002690:	3a01      	subs	r2, #1
 8002692:	0552      	lsls	r2, r2, #21
 8002694:	430a      	orrs	r2, r1
 8002696:	491f      	ldr	r1, [pc, #124]	@ (8002714 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002698:	4313      	orrs	r3, r2
 800269a:	610b      	str	r3, [r1, #16]
 800269c:	e011      	b.n	80026c2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800269e:	4b1d      	ldr	r3, [pc, #116]	@ (8002714 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80026a6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	6892      	ldr	r2, [r2, #8]
 80026ae:	0211      	lsls	r1, r2, #8
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	6952      	ldr	r2, [r2, #20]
 80026b4:	0852      	lsrs	r2, r2, #1
 80026b6:	3a01      	subs	r2, #1
 80026b8:	0652      	lsls	r2, r2, #25
 80026ba:	430a      	orrs	r2, r1
 80026bc:	4915      	ldr	r1, [pc, #84]	@ (8002714 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80026c2:	4b14      	ldr	r3, [pc, #80]	@ (8002714 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a13      	ldr	r2, [pc, #76]	@ (8002714 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026c8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80026cc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ce:	f7fe f997 	bl	8000a00 <HAL_GetTick>
 80026d2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026d4:	e009      	b.n	80026ea <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026d6:	f7fe f993 	bl	8000a00 <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d902      	bls.n	80026ea <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	73fb      	strb	r3, [r7, #15]
          break;
 80026e8:	e005      	b.n	80026f6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002714 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d0ef      	beq.n	80026d6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80026f6:	7bfb      	ldrb	r3, [r7, #15]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d106      	bne.n	800270a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80026fc:	4b05      	ldr	r3, [pc, #20]	@ (8002714 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026fe:	691a      	ldr	r2, [r3, #16]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	4903      	ldr	r1, [pc, #12]	@ (8002714 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002706:	4313      	orrs	r3, r2
 8002708:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800270a:	7bfb      	ldrb	r3, [r7, #15]
}
 800270c:	4618      	mov	r0, r3
 800270e:	3710      	adds	r7, #16
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	40021000 	.word	0x40021000

08002718 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002722:	2300      	movs	r3, #0
 8002724:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002726:	4b69      	ldr	r3, [pc, #420]	@ (80028cc <RCCEx_PLLSAI2_Config+0x1b4>)
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	f003 0303 	and.w	r3, r3, #3
 800272e:	2b00      	cmp	r3, #0
 8002730:	d018      	beq.n	8002764 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002732:	4b66      	ldr	r3, [pc, #408]	@ (80028cc <RCCEx_PLLSAI2_Config+0x1b4>)
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	f003 0203 	and.w	r2, r3, #3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	429a      	cmp	r2, r3
 8002740:	d10d      	bne.n	800275e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
       ||
 8002746:	2b00      	cmp	r3, #0
 8002748:	d009      	beq.n	800275e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800274a:	4b60      	ldr	r3, [pc, #384]	@ (80028cc <RCCEx_PLLSAI2_Config+0x1b4>)
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	091b      	lsrs	r3, r3, #4
 8002750:	f003 0307 	and.w	r3, r3, #7
 8002754:	1c5a      	adds	r2, r3, #1
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
       ||
 800275a:	429a      	cmp	r2, r3
 800275c:	d047      	beq.n	80027ee <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	73fb      	strb	r3, [r7, #15]
 8002762:	e044      	b.n	80027ee <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2b03      	cmp	r3, #3
 800276a:	d018      	beq.n	800279e <RCCEx_PLLSAI2_Config+0x86>
 800276c:	2b03      	cmp	r3, #3
 800276e:	d825      	bhi.n	80027bc <RCCEx_PLLSAI2_Config+0xa4>
 8002770:	2b01      	cmp	r3, #1
 8002772:	d002      	beq.n	800277a <RCCEx_PLLSAI2_Config+0x62>
 8002774:	2b02      	cmp	r3, #2
 8002776:	d009      	beq.n	800278c <RCCEx_PLLSAI2_Config+0x74>
 8002778:	e020      	b.n	80027bc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800277a:	4b54      	ldr	r3, [pc, #336]	@ (80028cc <RCCEx_PLLSAI2_Config+0x1b4>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d11d      	bne.n	80027c2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800278a:	e01a      	b.n	80027c2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800278c:	4b4f      	ldr	r3, [pc, #316]	@ (80028cc <RCCEx_PLLSAI2_Config+0x1b4>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002794:	2b00      	cmp	r3, #0
 8002796:	d116      	bne.n	80027c6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800279c:	e013      	b.n	80027c6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800279e:	4b4b      	ldr	r3, [pc, #300]	@ (80028cc <RCCEx_PLLSAI2_Config+0x1b4>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d10f      	bne.n	80027ca <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80027aa:	4b48      	ldr	r3, [pc, #288]	@ (80028cc <RCCEx_PLLSAI2_Config+0x1b4>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d109      	bne.n	80027ca <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80027ba:	e006      	b.n	80027ca <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	73fb      	strb	r3, [r7, #15]
      break;
 80027c0:	e004      	b.n	80027cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027c2:	bf00      	nop
 80027c4:	e002      	b.n	80027cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027c6:	bf00      	nop
 80027c8:	e000      	b.n	80027cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027ca:	bf00      	nop
    }

    if(status == HAL_OK)
 80027cc:	7bfb      	ldrb	r3, [r7, #15]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d10d      	bne.n	80027ee <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80027d2:	4b3e      	ldr	r3, [pc, #248]	@ (80028cc <RCCEx_PLLSAI2_Config+0x1b4>)
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6819      	ldr	r1, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	3b01      	subs	r3, #1
 80027e4:	011b      	lsls	r3, r3, #4
 80027e6:	430b      	orrs	r3, r1
 80027e8:	4938      	ldr	r1, [pc, #224]	@ (80028cc <RCCEx_PLLSAI2_Config+0x1b4>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80027ee:	7bfb      	ldrb	r3, [r7, #15]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d166      	bne.n	80028c2 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80027f4:	4b35      	ldr	r3, [pc, #212]	@ (80028cc <RCCEx_PLLSAI2_Config+0x1b4>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a34      	ldr	r2, [pc, #208]	@ (80028cc <RCCEx_PLLSAI2_Config+0x1b4>)
 80027fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002800:	f7fe f8fe 	bl	8000a00 <HAL_GetTick>
 8002804:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002806:	e009      	b.n	800281c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002808:	f7fe f8fa 	bl	8000a00 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d902      	bls.n	800281c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	73fb      	strb	r3, [r7, #15]
        break;
 800281a:	e005      	b.n	8002828 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800281c:	4b2b      	ldr	r3, [pc, #172]	@ (80028cc <RCCEx_PLLSAI2_Config+0x1b4>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1ef      	bne.n	8002808 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002828:	7bfb      	ldrb	r3, [r7, #15]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d149      	bne.n	80028c2 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d110      	bne.n	8002856 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002834:	4b25      	ldr	r3, [pc, #148]	@ (80028cc <RCCEx_PLLSAI2_Config+0x1b4>)
 8002836:	695b      	ldr	r3, [r3, #20]
 8002838:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 800283c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	6892      	ldr	r2, [r2, #8]
 8002844:	0211      	lsls	r1, r2, #8
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	68d2      	ldr	r2, [r2, #12]
 800284a:	06d2      	lsls	r2, r2, #27
 800284c:	430a      	orrs	r2, r1
 800284e:	491f      	ldr	r1, [pc, #124]	@ (80028cc <RCCEx_PLLSAI2_Config+0x1b4>)
 8002850:	4313      	orrs	r3, r2
 8002852:	614b      	str	r3, [r1, #20]
 8002854:	e011      	b.n	800287a <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002856:	4b1d      	ldr	r3, [pc, #116]	@ (80028cc <RCCEx_PLLSAI2_Config+0x1b4>)
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800285e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	6892      	ldr	r2, [r2, #8]
 8002866:	0211      	lsls	r1, r2, #8
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	6912      	ldr	r2, [r2, #16]
 800286c:	0852      	lsrs	r2, r2, #1
 800286e:	3a01      	subs	r2, #1
 8002870:	0652      	lsls	r2, r2, #25
 8002872:	430a      	orrs	r2, r1
 8002874:	4915      	ldr	r1, [pc, #84]	@ (80028cc <RCCEx_PLLSAI2_Config+0x1b4>)
 8002876:	4313      	orrs	r3, r2
 8002878:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800287a:	4b14      	ldr	r3, [pc, #80]	@ (80028cc <RCCEx_PLLSAI2_Config+0x1b4>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a13      	ldr	r2, [pc, #76]	@ (80028cc <RCCEx_PLLSAI2_Config+0x1b4>)
 8002880:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002884:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002886:	f7fe f8bb 	bl	8000a00 <HAL_GetTick>
 800288a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800288c:	e009      	b.n	80028a2 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800288e:	f7fe f8b7 	bl	8000a00 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d902      	bls.n	80028a2 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	73fb      	strb	r3, [r7, #15]
          break;
 80028a0:	e005      	b.n	80028ae <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80028a2:	4b0a      	ldr	r3, [pc, #40]	@ (80028cc <RCCEx_PLLSAI2_Config+0x1b4>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d0ef      	beq.n	800288e <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 80028ae:	7bfb      	ldrb	r3, [r7, #15]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d106      	bne.n	80028c2 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80028b4:	4b05      	ldr	r3, [pc, #20]	@ (80028cc <RCCEx_PLLSAI2_Config+0x1b4>)
 80028b6:	695a      	ldr	r2, [r3, #20]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	695b      	ldr	r3, [r3, #20]
 80028bc:	4903      	ldr	r1, [pc, #12]	@ (80028cc <RCCEx_PLLSAI2_Config+0x1b4>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80028c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	40021000 	.word	0x40021000

080028d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80028d0:	b084      	sub	sp, #16
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b084      	sub	sp, #16
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
 80028da:	f107 001c 	add.w	r0, r7, #28
 80028de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f000 fa68 	bl	8002dc4 <USB_CoreReset>
 80028f4:	4603      	mov	r3, r0
 80028f6:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80028f8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d106      	bne.n	800290e <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002904:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	639a      	str	r2, [r3, #56]	@ 0x38
 800290c:	e005      	b.n	800291a <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002912:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 800291a:	7bfb      	ldrb	r3, [r7, #15]
}
 800291c:	4618      	mov	r0, r3
 800291e:	3710      	adds	r7, #16
 8002920:	46bd      	mov	sp, r7
 8002922:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002926:	b004      	add	sp, #16
 8002928:	4770      	bx	lr

0800292a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800292a:	b480      	push	{r7}
 800292c:	b083      	sub	sp, #12
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f023 0201 	bic.w	r2, r3, #1
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	460b      	mov	r3, r1
 8002956:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002958:	2300      	movs	r3, #0
 800295a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002968:	78fb      	ldrb	r3, [r7, #3]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d115      	bne.n	800299a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800297a:	200a      	movs	r0, #10
 800297c:	f7fe f84c 	bl	8000a18 <HAL_Delay>
      ms += 10U;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	330a      	adds	r3, #10
 8002984:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 fa0e 	bl	8002da8 <USB_GetMode>
 800298c:	4603      	mov	r3, r0
 800298e:	2b01      	cmp	r3, #1
 8002990:	d01e      	beq.n	80029d0 <USB_SetCurrentMode+0x84>
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2bc7      	cmp	r3, #199	@ 0xc7
 8002996:	d9f0      	bls.n	800297a <USB_SetCurrentMode+0x2e>
 8002998:	e01a      	b.n	80029d0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800299a:	78fb      	ldrb	r3, [r7, #3]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d115      	bne.n	80029cc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80029ac:	200a      	movs	r0, #10
 80029ae:	f7fe f833 	bl	8000a18 <HAL_Delay>
      ms += 10U;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	330a      	adds	r3, #10
 80029b6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f000 f9f5 	bl	8002da8 <USB_GetMode>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d005      	beq.n	80029d0 <USB_SetCurrentMode+0x84>
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2bc7      	cmp	r3, #199	@ 0xc7
 80029c8:	d9f0      	bls.n	80029ac <USB_SetCurrentMode+0x60>
 80029ca:	e001      	b.n	80029d0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e005      	b.n	80029dc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2bc8      	cmp	r3, #200	@ 0xc8
 80029d4:	d101      	bne.n	80029da <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e000      	b.n	80029dc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3710      	adds	r7, #16
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80029e4:	b084      	sub	sp, #16
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b086      	sub	sp, #24
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
 80029ee:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80029f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80029f6:	2300      	movs	r3, #0
 80029f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80029fe:	2300      	movs	r3, #0
 8002a00:	613b      	str	r3, [r7, #16]
 8002a02:	e009      	b.n	8002a18 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	3340      	adds	r3, #64	@ 0x40
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	4413      	add	r3, r2
 8002a0e:	2200      	movs	r2, #0
 8002a10:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	3301      	adds	r3, #1
 8002a16:	613b      	str	r3, [r7, #16]
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	2b0e      	cmp	r3, #14
 8002a1c:	d9f2      	bls.n	8002a04 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002a1e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d11c      	bne.n	8002a60 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002a34:	f043 0302 	orr.w	r3, r3, #2
 8002a38:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a3e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	601a      	str	r2, [r3, #0]
 8002a5e:	e005      	b.n	8002a6c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a64:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8002a72:	461a      	mov	r2, r3
 8002a74:	2300      	movs	r3, #0
 8002a76:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002a78:	2103      	movs	r1, #3
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 f95a 	bl	8002d34 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002a80:	2110      	movs	r1, #16
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 f8f6 	bl	8002c74 <USB_FlushTxFifo>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 f920 	bl	8002cd8 <USB_FlushRxFifo>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	2300      	movs	r3, #0
 8002aac:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	613b      	str	r3, [r7, #16]
 8002aca:	e043      	b.n	8002b54 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	015a      	lsls	r2, r3, #5
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002ade:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002ae2:	d118      	bne.n	8002b16 <USB_DevInit+0x132>
    {
      if (i == 0U)
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d10a      	bne.n	8002b00 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	015a      	lsls	r2, r3, #5
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	4413      	add	r3, r2
 8002af2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002af6:	461a      	mov	r2, r3
 8002af8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002afc:	6013      	str	r3, [r2, #0]
 8002afe:	e013      	b.n	8002b28 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	015a      	lsls	r2, r3, #5
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	4413      	add	r3, r2
 8002b08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002b12:	6013      	str	r3, [r2, #0]
 8002b14:	e008      	b.n	8002b28 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	015a      	lsls	r2, r3, #5
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b22:	461a      	mov	r2, r3
 8002b24:	2300      	movs	r3, #0
 8002b26:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	015a      	lsls	r2, r3, #5
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	4413      	add	r3, r2
 8002b30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b34:	461a      	mov	r2, r3
 8002b36:	2300      	movs	r3, #0
 8002b38:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	015a      	lsls	r2, r3, #5
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	4413      	add	r3, r2
 8002b42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b46:	461a      	mov	r2, r3
 8002b48:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002b4c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	3301      	adds	r3, #1
 8002b52:	613b      	str	r3, [r7, #16]
 8002b54:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002b58:	461a      	mov	r2, r3
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d3b5      	bcc.n	8002acc <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002b60:	2300      	movs	r3, #0
 8002b62:	613b      	str	r3, [r7, #16]
 8002b64:	e043      	b.n	8002bee <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	015a      	lsls	r2, r3, #5
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002b78:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002b7c:	d118      	bne.n	8002bb0 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d10a      	bne.n	8002b9a <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	015a      	lsls	r2, r3, #5
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b90:	461a      	mov	r2, r3
 8002b92:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002b96:	6013      	str	r3, [r2, #0]
 8002b98:	e013      	b.n	8002bc2 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	015a      	lsls	r2, r3, #5
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002bac:	6013      	str	r3, [r2, #0]
 8002bae:	e008      	b.n	8002bc2 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	015a      	lsls	r2, r3, #5
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	015a      	lsls	r2, r3, #5
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	4413      	add	r3, r2
 8002bca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bce:	461a      	mov	r2, r3
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	015a      	lsls	r2, r3, #5
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	4413      	add	r3, r2
 8002bdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002be0:	461a      	mov	r2, r3
 8002be2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002be6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	3301      	adds	r3, #1
 8002bec:	613b      	str	r3, [r7, #16]
 8002bee:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d3b5      	bcc.n	8002b66 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	68fa      	ldr	r2, [r7, #12]
 8002c04:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c0c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8002c1a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	f043 0210 	orr.w	r2, r3, #16
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	699a      	ldr	r2, [r3, #24]
 8002c2c:	4b10      	ldr	r3, [pc, #64]	@ (8002c70 <USB_DevInit+0x28c>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8002c34:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d005      	beq.n	8002c48 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	699b      	ldr	r3, [r3, #24]
 8002c40:	f043 0208 	orr.w	r2, r3, #8
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8002c48:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d107      	bne.n	8002c60 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002c58:	f043 0304 	orr.w	r3, r3, #4
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8002c60:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3718      	adds	r7, #24
 8002c66:	46bd      	mov	sp, r7
 8002c68:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002c6c:	b004      	add	sp, #16
 8002c6e:	4770      	bx	lr
 8002c70:	803c3800 	.word	0x803c3800

08002c74 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	3301      	adds	r3, #1
 8002c86:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002c8e:	d901      	bls.n	8002c94 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e01b      	b.n	8002ccc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	691b      	ldr	r3, [r3, #16]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	daf2      	bge.n	8002c82 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	019b      	lsls	r3, r3, #6
 8002ca4:	f043 0220 	orr.w	r2, r3, #32
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	3301      	adds	r3, #1
 8002cb0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002cb8:	d901      	bls.n	8002cbe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e006      	b.n	8002ccc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	f003 0320 	and.w	r3, r3, #32
 8002cc6:	2b20      	cmp	r3, #32
 8002cc8:	d0f0      	beq.n	8002cac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3714      	adds	r7, #20
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002cf0:	d901      	bls.n	8002cf6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e018      	b.n	8002d28 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	daf2      	bge.n	8002ce4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2210      	movs	r2, #16
 8002d06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002d14:	d901      	bls.n	8002d1a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e006      	b.n	8002d28 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	f003 0310 	and.w	r3, r3, #16
 8002d22:	2b10      	cmp	r3, #16
 8002d24:	d0f0      	beq.n	8002d08 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3714      	adds	r7, #20
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	78fb      	ldrb	r3, [r7, #3]
 8002d4e:	68f9      	ldr	r1, [r7, #12]
 8002d50:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002d54:	4313      	orrs	r3, r2
 8002d56:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3714      	adds	r7, #20
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr

08002d66 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8002d66:	b480      	push	{r7}
 8002d68:	b085      	sub	sp, #20
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8002d80:	f023 0303 	bic.w	r3, r3, #3
 8002d84:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d94:	f043 0302 	orr.w	r3, r3, #2
 8002d98:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3714      	adds	r7, #20
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	695b      	ldr	r3, [r3, #20]
 8002db4:	f003 0301 	and.w	r3, r3, #1
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b085      	sub	sp, #20
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002ddc:	d901      	bls.n	8002de2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e01b      	b.n	8002e1a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	daf2      	bge.n	8002dd0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8002dea:	2300      	movs	r3, #0
 8002dec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	f043 0201 	orr.w	r2, r3, #1
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002e06:	d901      	bls.n	8002e0c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e006      	b.n	8002e1a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	f003 0301 	and.w	r3, r3, #1
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d0f0      	beq.n	8002dfa <USB_CoreReset+0x36>

  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3714      	adds	r7, #20
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr

08002e26 <memset>:
 8002e26:	4402      	add	r2, r0
 8002e28:	4603      	mov	r3, r0
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d100      	bne.n	8002e30 <memset+0xa>
 8002e2e:	4770      	bx	lr
 8002e30:	f803 1b01 	strb.w	r1, [r3], #1
 8002e34:	e7f9      	b.n	8002e2a <memset+0x4>
	...

08002e38 <__libc_init_array>:
 8002e38:	b570      	push	{r4, r5, r6, lr}
 8002e3a:	4d0d      	ldr	r5, [pc, #52]	@ (8002e70 <__libc_init_array+0x38>)
 8002e3c:	4c0d      	ldr	r4, [pc, #52]	@ (8002e74 <__libc_init_array+0x3c>)
 8002e3e:	1b64      	subs	r4, r4, r5
 8002e40:	10a4      	asrs	r4, r4, #2
 8002e42:	2600      	movs	r6, #0
 8002e44:	42a6      	cmp	r6, r4
 8002e46:	d109      	bne.n	8002e5c <__libc_init_array+0x24>
 8002e48:	4d0b      	ldr	r5, [pc, #44]	@ (8002e78 <__libc_init_array+0x40>)
 8002e4a:	4c0c      	ldr	r4, [pc, #48]	@ (8002e7c <__libc_init_array+0x44>)
 8002e4c:	f000 f818 	bl	8002e80 <_init>
 8002e50:	1b64      	subs	r4, r4, r5
 8002e52:	10a4      	asrs	r4, r4, #2
 8002e54:	2600      	movs	r6, #0
 8002e56:	42a6      	cmp	r6, r4
 8002e58:	d105      	bne.n	8002e66 <__libc_init_array+0x2e>
 8002e5a:	bd70      	pop	{r4, r5, r6, pc}
 8002e5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e60:	4798      	blx	r3
 8002e62:	3601      	adds	r6, #1
 8002e64:	e7ee      	b.n	8002e44 <__libc_init_array+0xc>
 8002e66:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e6a:	4798      	blx	r3
 8002e6c:	3601      	adds	r6, #1
 8002e6e:	e7f2      	b.n	8002e56 <__libc_init_array+0x1e>
 8002e70:	08002ed8 	.word	0x08002ed8
 8002e74:	08002ed8 	.word	0x08002ed8
 8002e78:	08002ed8 	.word	0x08002ed8
 8002e7c:	08002edc 	.word	0x08002edc

08002e80 <_init>:
 8002e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e82:	bf00      	nop
 8002e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e86:	bc08      	pop	{r3}
 8002e88:	469e      	mov	lr, r3
 8002e8a:	4770      	bx	lr

08002e8c <_fini>:
 8002e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e8e:	bf00      	nop
 8002e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e92:	bc08      	pop	{r3}
 8002e94:	469e      	mov	lr, r3
 8002e96:	4770      	bx	lr
